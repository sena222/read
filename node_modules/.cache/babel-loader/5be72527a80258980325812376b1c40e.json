{"ast":null,"code":"import EventEmitter from \"event-emitter\";\nimport { extend, defer } from \"./utils/core\";\nimport Url from \"./utils/url\";\nimport Path from \"./utils/path\";\nimport Spine from \"./spine\";\nimport Locations from \"./locations\";\nimport Container from \"./container\";\nimport Packaging from \"./packaging\";\nimport Navigation from \"./navigation\";\nimport Resources from \"./resources\";\nimport PageList from \"./pagelist\";\nimport Rendition from \"./rendition\";\nimport Archive from \"./archive\";\nimport request from \"./utils/request\";\nimport EpubCFI from \"./epubcfi\";\nimport Store from \"./store\";\nimport DisplayOptions from \"./displayoptions\";\nimport { EPUBJS_VERSION, EVENTS } from \"./utils/constants\";\nconst CONTAINER_PATH = \"META-INF/container.xml\";\nconst IBOOKS_DISPLAY_OPTIONS_PATH = \"META-INF/com.apple.ibooks.display-options.xml\";\nconst INPUT_TYPE = {\n  BINARY: \"binary\",\n  BASE64: \"base64\",\n  EPUB: \"epub\",\n  OPF: \"opf\",\n  MANIFEST: \"json\",\n  DIRECTORY: \"directory\"\n};\n\n/**\n * An Epub representation with methods for the loading, parsing and manipulation\n * of its contents.\n * @class\n * @param {string} [url]\n * @param {object} [options]\n * @param {method} [options.requestMethod] a request function to use instead of the default\n * @param {boolean} [options.requestCredentials=undefined] send the xhr request withCredentials\n * @param {object} [options.requestHeaders=undefined] send the xhr request headers\n * @param {string} [options.encoding=binary] optional to pass 'binary' or base64' for archived Epubs\n * @param {string} [options.replacements=none] use base64, blobUrl, or none for replacing assets in archived Epubs\n * @param {method} [options.canonical] optional function to determine canonical urls for a path\n * @param {string} [options.openAs] optional string to determine the input type\n * @param {string} [options.store=false] cache the contents in local storage, value should be the name of the reader\n * @returns {Book}\n * @example new Book(\"/path/to/book.epub\", {})\n * @example new Book({ replacements: \"blobUrl\" })\n */\nclass Book {\n  constructor(url, options) {\n    // Allow passing just options to the Book\n    if (typeof options === \"undefined\" && typeof url !== \"string\" && url instanceof Blob === false && url instanceof ArrayBuffer === false) {\n      options = url;\n      url = undefined;\n    }\n    this.settings = extend(this.settings || {}, {\n      requestMethod: undefined,\n      requestCredentials: undefined,\n      requestHeaders: undefined,\n      encoding: undefined,\n      replacements: undefined,\n      canonical: undefined,\n      openAs: undefined,\n      store: undefined\n    });\n    extend(this.settings, options);\n\n    // Promises\n    this.opening = new defer();\n    /**\n     * @member {promise} opened returns after the book is loaded\n     * @memberof Book\n     */\n    this.opened = this.opening.promise;\n    this.isOpen = false;\n    this.loading = {\n      manifest: new defer(),\n      spine: new defer(),\n      metadata: new defer(),\n      cover: new defer(),\n      navigation: new defer(),\n      pageList: new defer(),\n      resources: new defer(),\n      displayOptions: new defer()\n    };\n    this.loaded = {\n      manifest: this.loading.manifest.promise,\n      spine: this.loading.spine.promise,\n      metadata: this.loading.metadata.promise,\n      cover: this.loading.cover.promise,\n      navigation: this.loading.navigation.promise,\n      pageList: this.loading.pageList.promise,\n      resources: this.loading.resources.promise,\n      displayOptions: this.loading.displayOptions.promise\n    };\n\n    /**\n     * @member {promise} ready returns after the book is loaded and parsed\n     * @memberof Book\n     * @private\n     */\n    this.ready = Promise.all([this.loaded.manifest, this.loaded.spine, this.loaded.metadata, this.loaded.cover, this.loaded.navigation, this.loaded.resources, this.loaded.displayOptions]);\n\n    // Queue for methods used before opening\n    this.isRendered = false;\n    // this._q = queue(this);\n\n    /**\n     * @member {method} request\n     * @memberof Book\n     * @private\n     */\n    this.request = this.settings.requestMethod || request;\n\n    /**\n     * @member {Spine} spine\n     * @memberof Book\n     */\n    this.spine = new Spine();\n\n    /**\n     * @member {Locations} locations\n     * @memberof Book\n     */\n    this.locations = new Locations(this.spine, this.load.bind(this));\n\n    /**\n     * @member {Navigation} navigation\n     * @memberof Book\n     */\n    this.navigation = undefined;\n\n    /**\n     * @member {PageList} pagelist\n     * @memberof Book\n     */\n    this.pageList = undefined;\n\n    /**\n     * @member {Url} url\n     * @memberof Book\n     * @private\n     */\n    this.url = undefined;\n\n    /**\n     * @member {Path} path\n     * @memberof Book\n     * @private\n     */\n    this.path = undefined;\n\n    /**\n     * @member {boolean} archived\n     * @memberof Book\n     * @private\n     */\n    this.archived = false;\n\n    /**\n     * @member {Archive} archive\n     * @memberof Book\n     * @private\n     */\n    this.archive = undefined;\n\n    /**\n     * @member {Store} storage\n     * @memberof Book\n     * @private\n     */\n    this.storage = undefined;\n\n    /**\n     * @member {Resources} resources\n     * @memberof Book\n     * @private\n     */\n    this.resources = undefined;\n\n    /**\n     * @member {Rendition} rendition\n     * @memberof Book\n     * @private\n     */\n    this.rendition = undefined;\n\n    /**\n     * @member {Container} container\n     * @memberof Book\n     * @private\n     */\n    this.container = undefined;\n\n    /**\n     * @member {Packaging} packaging\n     * @memberof Book\n     * @private\n     */\n    this.packaging = undefined;\n\n    /**\n     * @member {DisplayOptions} displayOptions\n     * @memberof DisplayOptions\n     * @private\n     */\n    this.displayOptions = undefined;\n\n    // this.toc = undefined;\n    if (this.settings.store) {\n      this.store(this.settings.store);\n    }\n    if (url) {\n      this.open(url, this.settings.openAs).catch(error => {\n        var err = new Error(\"Cannot load book at \" + url);\n        this.emit(EVENTS.BOOK.OPEN_FAILED, err);\n      });\n    }\n  }\n\n  /**\n   * Open a epub or url\n   * @param {string | ArrayBuffer} input Url, Path or ArrayBuffer\n   * @param {string} [what=\"binary\", \"base64\", \"epub\", \"opf\", \"json\", \"directory\"] force opening as a certain type\n   * @returns {Promise} of when the book has been loaded\n   * @example book.open(\"/path/to/book.epub\")\n   */\n  open(input, what) {\n    var opening;\n    var type = what || this.determineType(input);\n    if (type === INPUT_TYPE.BINARY) {\n      this.archived = true;\n      this.url = new Url(\"/\", \"\");\n      opening = this.openEpub(input);\n    } else if (type === INPUT_TYPE.BASE64) {\n      this.archived = true;\n      this.url = new Url(\"/\", \"\");\n      opening = this.openEpub(input, type);\n    } else if (type === INPUT_TYPE.EPUB) {\n      this.archived = true;\n      this.url = new Url(\"/\", \"\");\n      opening = this.request(input, \"binary\", this.settings.requestCredentials, this.settings.requestHeaders).then(this.openEpub.bind(this));\n    } else if (type == INPUT_TYPE.OPF) {\n      this.url = new Url(input);\n      opening = this.openPackaging(this.url.Path.toString());\n    } else if (type == INPUT_TYPE.MANIFEST) {\n      this.url = new Url(input);\n      opening = this.openManifest(this.url.Path.toString());\n    } else {\n      this.url = new Url(input);\n      opening = this.openContainer(CONTAINER_PATH).then(this.openPackaging.bind(this));\n    }\n    return opening;\n  }\n\n  /**\n   * Open an archived epub\n   * @private\n   * @param  {binary} data\n   * @param  {string} [encoding]\n   * @return {Promise}\n   */\n  openEpub(data, encoding) {\n    return this.unarchive(data, encoding || this.settings.encoding).then(() => {\n      return this.openContainer(CONTAINER_PATH);\n    }).then(packagePath => {\n      return this.openPackaging(packagePath);\n    });\n  }\n\n  /**\n   * Open the epub container\n   * @private\n   * @param  {string} url\n   * @return {string} packagePath\n   */\n  openContainer(url) {\n    return this.load(url).then(xml => {\n      this.container = new Container(xml);\n      return this.resolve(this.container.packagePath);\n    });\n  }\n\n  /**\n   * Open the Open Packaging Format Xml\n   * @private\n   * @param  {string} url\n   * @return {Promise}\n   */\n  openPackaging(url) {\n    this.path = new Path(url);\n    return this.load(url).then(xml => {\n      this.packaging = new Packaging(xml);\n      return this.unpack(this.packaging);\n    });\n  }\n\n  /**\n   * Open the manifest JSON\n   * @private\n   * @param  {string} url\n   * @return {Promise}\n   */\n  openManifest(url) {\n    this.path = new Path(url);\n    return this.load(url).then(json => {\n      this.packaging = new Packaging();\n      this.packaging.load(json);\n      return this.unpack(this.packaging);\n    });\n  }\n\n  /**\n   * Load a resource from the Book\n   * @param  {string} path path to the resource to load\n   * @return {Promise}     returns a promise with the requested resource\n   */\n  load(path) {\n    var resolved = this.resolve(path);\n    if (this.archived) {\n      return this.archive.request(resolved);\n    } else {\n      return this.request(resolved, null, this.settings.requestCredentials, this.settings.requestHeaders);\n    }\n  }\n\n  /**\n   * Resolve a path to it's absolute position in the Book\n   * @param  {string} path\n   * @param  {boolean} [absolute] force resolving the full URL\n   * @return {string}          the resolved path string\n   */\n  resolve(path, absolute) {\n    if (!path) {\n      return;\n    }\n    var resolved = path;\n    var isAbsolute = path.indexOf(\"://\") > -1;\n    if (isAbsolute) {\n      return path;\n    }\n    if (this.path) {\n      resolved = this.path.resolve(path);\n    }\n    if (absolute != false && this.url) {\n      resolved = this.url.resolve(resolved);\n    }\n    return resolved;\n  }\n\n  /**\n   * Get a canonical link to a path\n   * @param  {string} path\n   * @return {string} the canonical path string\n   */\n  canonical(path) {\n    var url = path;\n    if (!path) {\n      return \"\";\n    }\n    if (this.settings.canonical) {\n      url = this.settings.canonical(path);\n    } else {\n      url = this.resolve(path, true);\n    }\n    return url;\n  }\n\n  /**\n   * Determine the type of they input passed to open\n   * @private\n   * @param  {string} input\n   * @return {string}  binary | directory | epub | opf\n   */\n  determineType(input) {\n    var url;\n    var path;\n    var extension;\n    if (this.settings.encoding === \"base64\") {\n      return INPUT_TYPE.BASE64;\n    }\n    if (typeof input != \"string\") {\n      return INPUT_TYPE.BINARY;\n    }\n    url = new Url(input);\n    path = url.path();\n    extension = path.extension;\n\n    // If there's a search string, remove it before determining type\n    if (extension) {\n      extension = extension.replace(/\\?.*$/, \"\");\n    }\n    if (!extension) {\n      return INPUT_TYPE.DIRECTORY;\n    }\n    if (extension === \"epub\") {\n      return INPUT_TYPE.EPUB;\n    }\n    if (extension === \"opf\") {\n      return INPUT_TYPE.OPF;\n    }\n    if (extension === \"json\") {\n      return INPUT_TYPE.MANIFEST;\n    }\n  }\n\n  /**\n   * unpack the contents of the Books packaging\n   * @private\n   * @param {Packaging} packaging object\n   */\n  unpack(packaging) {\n    this.package = packaging; //TODO: deprecated this\n\n    if (this.packaging.metadata.layout === \"\") {\n      // rendition:layout not set - check display options if book is pre-paginated\n      this.load(this.url.resolve(IBOOKS_DISPLAY_OPTIONS_PATH)).then(xml => {\n        this.displayOptions = new DisplayOptions(xml);\n        this.loading.displayOptions.resolve(this.displayOptions);\n      }).catch(err => {\n        this.displayOptions = new DisplayOptions();\n        this.loading.displayOptions.resolve(this.displayOptions);\n      });\n    } else {\n      this.displayOptions = new DisplayOptions();\n      this.loading.displayOptions.resolve(this.displayOptions);\n    }\n    this.spine.unpack(this.packaging, this.resolve.bind(this), this.canonical.bind(this));\n    this.resources = new Resources(this.packaging.manifest, {\n      archive: this.archive,\n      resolver: this.resolve.bind(this),\n      request: this.request.bind(this),\n      replacements: this.settings.replacements || (this.archived ? \"blobUrl\" : \"base64\")\n    });\n    this.loadNavigation(this.packaging).then(() => {\n      // this.toc = this.navigation.toc;\n      this.loading.navigation.resolve(this.navigation);\n    });\n    if (this.packaging.coverPath) {\n      this.cover = this.resolve(this.packaging.coverPath);\n    }\n    // Resolve promises\n    this.loading.manifest.resolve(this.packaging.manifest);\n    this.loading.metadata.resolve(this.packaging.metadata);\n    this.loading.spine.resolve(this.spine);\n    this.loading.cover.resolve(this.cover);\n    this.loading.resources.resolve(this.resources);\n    this.loading.pageList.resolve(this.pageList);\n    this.isOpen = true;\n    if (this.archived || this.settings.replacements && this.settings.replacements != \"none\") {\n      this.replacements().then(() => {\n        this.loaded.displayOptions.then(() => {\n          this.opening.resolve(this);\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n    } else {\n      // Resolve book opened promise\n      this.loaded.displayOptions.then(() => {\n        this.opening.resolve(this);\n      });\n    }\n  }\n\n  /**\n   * Load Navigation and PageList from package\n   * @private\n   * @param {Packaging} packaging\n   */\n  loadNavigation(packaging) {\n    let navPath = packaging.navPath || packaging.ncxPath;\n    let toc = packaging.toc;\n\n    // From json manifest\n    if (toc) {\n      return new Promise((resolve, reject) => {\n        this.navigation = new Navigation(toc);\n        if (packaging.pageList) {\n          this.pageList = new PageList(packaging.pageList); // TODO: handle page lists from Manifest\n        }\n\n        resolve(this.navigation);\n      });\n    }\n    if (!navPath) {\n      return new Promise((resolve, reject) => {\n        this.navigation = new Navigation();\n        this.pageList = new PageList();\n        resolve(this.navigation);\n      });\n    }\n    return this.load(navPath, \"xml\").then(xml => {\n      this.navigation = new Navigation(xml);\n      this.pageList = new PageList(xml);\n      return this.navigation;\n    });\n  }\n\n  /**\n   * Gets a Section of the Book from the Spine\n   * Alias for `book.spine.get`\n   * @param {string} target\n   * @return {Section}\n   */\n  section(target) {\n    return this.spine.get(target);\n  }\n\n  /**\n   * Sugar to render a book to an element\n   * @param  {element | string} element element or string to add a rendition to\n   * @param  {object} [options]\n   * @return {Rendition}\n   */\n  renderTo(element, options) {\n    this.rendition = new Rendition(this, options);\n    this.rendition.attachTo(element);\n    return this.rendition;\n  }\n\n  /**\n   * Set if request should use withCredentials\n   * @param {boolean} credentials\n   */\n  setRequestCredentials(credentials) {\n    this.settings.requestCredentials = credentials;\n  }\n\n  /**\n   * Set headers request should use\n   * @param {object} headers\n   */\n  setRequestHeaders(headers) {\n    this.settings.requestHeaders = headers;\n  }\n\n  /**\n   * Unarchive a zipped epub\n   * @private\n   * @param  {binary} input epub data\n   * @param  {string} [encoding]\n   * @return {Archive}\n   */\n  unarchive(input, encoding) {\n    this.archive = new Archive();\n    return this.archive.open(input, encoding);\n  }\n\n  /**\n   * Store the epubs contents\n   * @private\n   * @param  {binary} input epub data\n   * @param  {string} [encoding]\n   * @return {Store}\n   */\n  store(name) {\n    // Use \"blobUrl\" or \"base64\" for replacements\n    let replacementsSetting = this.settings.replacements && this.settings.replacements !== \"none\";\n    // Save original url\n    let originalUrl = this.url;\n    // Save original request method\n    let requester = this.settings.requestMethod || request.bind(this);\n    // Create new Store\n    this.storage = new Store(name, requester, this.resolve.bind(this));\n    // Replace request method to go through store\n    this.request = this.storage.request.bind(this.storage);\n    this.opened.then(() => {\n      if (this.archived) {\n        this.storage.requester = this.archive.request.bind(this.archive);\n      }\n      // Substitute hook\n      let substituteResources = (output, section) => {\n        section.output = this.resources.substitute(output, section.url);\n      };\n\n      // Set to use replacements\n      this.resources.settings.replacements = replacementsSetting || \"blobUrl\";\n      // Create replacement urls\n      this.resources.replacements().then(() => {\n        return this.resources.replaceCss();\n      });\n      this.storage.on(\"offline\", () => {\n        // Remove url to use relative resolving for hrefs\n        this.url = new Url(\"/\", \"\");\n        // Add hook to replace resources in contents\n        this.spine.hooks.serialize.register(substituteResources);\n      });\n      this.storage.on(\"online\", () => {\n        // Restore original url\n        this.url = originalUrl;\n        // Remove hook\n        this.spine.hooks.serialize.deregister(substituteResources);\n      });\n    });\n    return this.storage;\n  }\n\n  /**\n   * Get the cover url\n   * @return {Promise<?string>} coverUrl\n   */\n  coverUrl() {\n    return this.loaded.cover.then(() => {\n      if (!this.cover) {\n        return null;\n      }\n      if (this.archived) {\n        return this.archive.createUrl(this.cover);\n      } else {\n        return this.cover;\n      }\n    });\n  }\n\n  /**\n   * Load replacement urls\n   * @private\n   * @return {Promise} completed loading urls\n   */\n  replacements() {\n    this.spine.hooks.serialize.register((output, section) => {\n      section.output = this.resources.substitute(output, section.url);\n    });\n    return this.resources.replacements().then(() => {\n      return this.resources.replaceCss();\n    });\n  }\n\n  /**\n   * Find a DOM Range for a given CFI Range\n   * @param  {EpubCFI} cfiRange a epub cfi range\n   * @return {Promise}\n   */\n  getRange(cfiRange) {\n    var cfi = new EpubCFI(cfiRange);\n    var item = this.spine.get(cfi.spinePos);\n    var _request = this.load.bind(this);\n    if (!item) {\n      return new Promise((resolve, reject) => {\n        reject(\"CFI could not be found\");\n      });\n    }\n    return item.load(_request).then(function (contents) {\n      var range = cfi.toRange(item.document);\n      return range;\n    });\n  }\n\n  /**\n   * Generates the Book Key using the identifier in the manifest or other string provided\n   * @param  {string} [identifier] to use instead of metadata identifier\n   * @return {string} key\n   */\n  key(identifier) {\n    var ident = identifier || this.packaging.metadata.identifier || this.url.filename;\n    return `epubjs:${EPUBJS_VERSION}:${ident}`;\n  }\n\n  /**\n   * Destroy the Book and all associated objects\n   */\n  destroy() {\n    this.opened = undefined;\n    this.loading = undefined;\n    this.loaded = undefined;\n    this.ready = undefined;\n    this.isOpen = false;\n    this.isRendered = false;\n    this.spine && this.spine.destroy();\n    this.locations && this.locations.destroy();\n    this.pageList && this.pageList.destroy();\n    this.archive && this.archive.destroy();\n    this.resources && this.resources.destroy();\n    this.container && this.container.destroy();\n    this.packaging && this.packaging.destroy();\n    this.rendition && this.rendition.destroy();\n    this.displayOptions && this.displayOptions.destroy();\n    this.spine = undefined;\n    this.locations = undefined;\n    this.pageList = undefined;\n    this.archive = undefined;\n    this.resources = undefined;\n    this.container = undefined;\n    this.packaging = undefined;\n    this.rendition = undefined;\n    this.navigation = undefined;\n    this.url = undefined;\n    this.path = undefined;\n    this.archived = false;\n  }\n}\n\n//-- Enable binding events to book\nEventEmitter(Book.prototype);\nexport default Book;","map":{"version":3,"names":["EventEmitter","extend","defer","Url","Path","Spine","Locations","Container","Packaging","Navigation","Resources","PageList","Rendition","Archive","request","EpubCFI","Store","DisplayOptions","EPUBJS_VERSION","EVENTS","CONTAINER_PATH","IBOOKS_DISPLAY_OPTIONS_PATH","INPUT_TYPE","BINARY","BASE64","EPUB","OPF","MANIFEST","DIRECTORY","Book","constructor","url","options","Blob","ArrayBuffer","undefined","settings","requestMethod","requestCredentials","requestHeaders","encoding","replacements","canonical","openAs","store","opening","opened","promise","isOpen","loading","manifest","spine","metadata","cover","navigation","pageList","resources","displayOptions","loaded","ready","Promise","all","isRendered","locations","load","bind","path","archived","archive","storage","rendition","container","packaging","open","catch","error","err","Error","emit","BOOK","OPEN_FAILED","input","what","type","determineType","openEpub","then","openPackaging","toString","openManifest","openContainer","data","unarchive","packagePath","xml","resolve","unpack","json","resolved","absolute","isAbsolute","indexOf","extension","replace","package","layout","resolver","loadNavigation","coverPath","console","navPath","ncxPath","toc","reject","section","target","get","renderTo","element","attachTo","setRequestCredentials","credentials","setRequestHeaders","headers","name","replacementsSetting","originalUrl","requester","substituteResources","output","substitute","replaceCss","on","hooks","serialize","register","deregister","coverUrl","createUrl","getRange","cfiRange","cfi","item","spinePos","_request","contents","range","toRange","document","key","identifier","ident","filename","destroy","prototype"],"sources":["/home/parallels/Downloads/react-epub-viewer-demo/node_modules/epubjs/src/book.js"],"sourcesContent":["import EventEmitter from \"event-emitter\";\nimport {extend, defer} from \"./utils/core\";\nimport Url from \"./utils/url\";\nimport Path from \"./utils/path\";\nimport Spine from \"./spine\";\nimport Locations from \"./locations\";\nimport Container from \"./container\";\nimport Packaging from \"./packaging\";\nimport Navigation from \"./navigation\";\nimport Resources from \"./resources\";\nimport PageList from \"./pagelist\";\nimport Rendition from \"./rendition\";\nimport Archive from \"./archive\";\nimport request from \"./utils/request\";\nimport EpubCFI from \"./epubcfi\";\nimport Store from \"./store\";\nimport DisplayOptions from \"./displayoptions\";\nimport { EPUBJS_VERSION, EVENTS } from \"./utils/constants\";\n\nconst CONTAINER_PATH = \"META-INF/container.xml\";\nconst IBOOKS_DISPLAY_OPTIONS_PATH = \"META-INF/com.apple.ibooks.display-options.xml\";\n\nconst INPUT_TYPE = {\n\tBINARY: \"binary\",\n\tBASE64: \"base64\",\n\tEPUB: \"epub\",\n\tOPF: \"opf\",\n\tMANIFEST: \"json\",\n\tDIRECTORY: \"directory\"\n};\n\n/**\n * An Epub representation with methods for the loading, parsing and manipulation\n * of its contents.\n * @class\n * @param {string} [url]\n * @param {object} [options]\n * @param {method} [options.requestMethod] a request function to use instead of the default\n * @param {boolean} [options.requestCredentials=undefined] send the xhr request withCredentials\n * @param {object} [options.requestHeaders=undefined] send the xhr request headers\n * @param {string} [options.encoding=binary] optional to pass 'binary' or base64' for archived Epubs\n * @param {string} [options.replacements=none] use base64, blobUrl, or none for replacing assets in archived Epubs\n * @param {method} [options.canonical] optional function to determine canonical urls for a path\n * @param {string} [options.openAs] optional string to determine the input type\n * @param {string} [options.store=false] cache the contents in local storage, value should be the name of the reader\n * @returns {Book}\n * @example new Book(\"/path/to/book.epub\", {})\n * @example new Book({ replacements: \"blobUrl\" })\n */\nclass Book {\n\tconstructor(url, options) {\n\t\t// Allow passing just options to the Book\n\t\tif (typeof(options) === \"undefined\" &&\n\t\t\t  typeof(url) !== \"string\" &&\n\t\t    url instanceof Blob === false &&\n\t\t    url instanceof ArrayBuffer === false) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\tthis.settings = extend(this.settings || {}, {\n\t\t\trequestMethod: undefined,\n\t\t\trequestCredentials: undefined,\n\t\t\trequestHeaders: undefined,\n\t\t\tencoding: undefined,\n\t\t\treplacements: undefined,\n\t\t\tcanonical: undefined,\n\t\t\topenAs: undefined,\n\t\t\tstore: undefined\n\t\t});\n\n\t\textend(this.settings, options);\n\n\n\t\t// Promises\n\t\tthis.opening = new defer();\n\t\t/**\n\t\t * @member {promise} opened returns after the book is loaded\n\t\t * @memberof Book\n\t\t */\n\t\tthis.opened = this.opening.promise;\n\t\tthis.isOpen = false;\n\n\t\tthis.loading = {\n\t\t\tmanifest: new defer(),\n\t\t\tspine: new defer(),\n\t\t\tmetadata: new defer(),\n\t\t\tcover: new defer(),\n\t\t\tnavigation: new defer(),\n\t\t\tpageList: new defer(),\n\t\t\tresources: new defer(),\n\t\t\tdisplayOptions: new defer()\n\t\t};\n\n\t\tthis.loaded = {\n\t\t\tmanifest: this.loading.manifest.promise,\n\t\t\tspine: this.loading.spine.promise,\n\t\t\tmetadata: this.loading.metadata.promise,\n\t\t\tcover: this.loading.cover.promise,\n\t\t\tnavigation: this.loading.navigation.promise,\n\t\t\tpageList: this.loading.pageList.promise,\n\t\t\tresources: this.loading.resources.promise,\n\t\t\tdisplayOptions: this.loading.displayOptions.promise\n\t\t};\n\n\t\t/**\n\t\t * @member {promise} ready returns after the book is loaded and parsed\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.ready = Promise.all([\n\t\t\tthis.loaded.manifest,\n\t\t\tthis.loaded.spine,\n\t\t\tthis.loaded.metadata,\n\t\t\tthis.loaded.cover,\n\t\t\tthis.loaded.navigation,\n\t\t\tthis.loaded.resources,\n\t\t\tthis.loaded.displayOptions\n\t\t]);\n\n\n\t\t// Queue for methods used before opening\n\t\tthis.isRendered = false;\n\t\t// this._q = queue(this);\n\n\t\t/**\n\t\t * @member {method} request\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.request = this.settings.requestMethod || request;\n\n\t\t/**\n\t\t * @member {Spine} spine\n\t\t * @memberof Book\n\t\t */\n\t\tthis.spine = new Spine();\n\n\t\t/**\n\t\t * @member {Locations} locations\n\t\t * @memberof Book\n\t\t */\n\t\tthis.locations = new Locations(this.spine, this.load.bind(this));\n\n\t\t/**\n\t\t * @member {Navigation} navigation\n\t\t * @memberof Book\n\t\t */\n\t\tthis.navigation = undefined;\n\n\t\t/**\n\t\t * @member {PageList} pagelist\n\t\t * @memberof Book\n\t\t */\n\t\tthis.pageList = undefined;\n\n\t\t/**\n\t\t * @member {Url} url\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.url = undefined;\n\n\t\t/**\n\t\t * @member {Path} path\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.path = undefined;\n\n\t\t/**\n\t\t * @member {boolean} archived\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.archived = false;\n\n\t\t/**\n\t\t * @member {Archive} archive\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.archive = undefined;\n\n\t\t/**\n\t\t * @member {Store} storage\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.storage = undefined;\n\n\t\t/**\n\t\t * @member {Resources} resources\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.resources = undefined;\n\n\t\t/**\n\t\t * @member {Rendition} rendition\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.rendition = undefined;\n\n\t\t/**\n\t\t * @member {Container} container\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.container = undefined;\n\n\t\t/**\n\t\t * @member {Packaging} packaging\n\t\t * @memberof Book\n\t\t * @private\n\t\t */\n\t\tthis.packaging = undefined;\n\n\t\t/**\n\t\t * @member {DisplayOptions} displayOptions\n\t\t * @memberof DisplayOptions\n\t\t * @private\n\t\t */\n\t\tthis.displayOptions = undefined;\n\n\t\t// this.toc = undefined;\n\t\tif (this.settings.store) {\n\t\t\tthis.store(this.settings.store);\n\t\t}\n\n\t\tif(url) {\n\t\t\tthis.open(url, this.settings.openAs).catch((error) => {\n\t\t\t\tvar err = new Error(\"Cannot load book at \"+ url );\n\t\t\t\tthis.emit(EVENTS.BOOK.OPEN_FAILED, err);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Open a epub or url\n\t * @param {string | ArrayBuffer} input Url, Path or ArrayBuffer\n\t * @param {string} [what=\"binary\", \"base64\", \"epub\", \"opf\", \"json\", \"directory\"] force opening as a certain type\n\t * @returns {Promise} of when the book has been loaded\n\t * @example book.open(\"/path/to/book.epub\")\n\t */\n\topen(input, what) {\n\t\tvar opening;\n\t\tvar type = what || this.determineType(input);\n\n\t\tif (type === INPUT_TYPE.BINARY) {\n\t\t\tthis.archived = true;\n\t\t\tthis.url = new Url(\"/\", \"\");\n\t\t\topening = this.openEpub(input);\n\t\t} else if (type === INPUT_TYPE.BASE64) {\n\t\t\tthis.archived = true;\n\t\t\tthis.url = new Url(\"/\", \"\");\n\t\t\topening = this.openEpub(input, type);\n\t\t} else if (type === INPUT_TYPE.EPUB) {\n\t\t\tthis.archived = true;\n\t\t\tthis.url = new Url(\"/\", \"\");\n\t\t\topening = this.request(input, \"binary\", this.settings.requestCredentials, this.settings.requestHeaders)\n\t\t\t\t.then(this.openEpub.bind(this));\n\t\t} else if(type == INPUT_TYPE.OPF) {\n\t\t\tthis.url = new Url(input);\n\t\t\topening = this.openPackaging(this.url.Path.toString());\n\t\t} else if(type == INPUT_TYPE.MANIFEST) {\n\t\t\tthis.url = new Url(input);\n\t\t\topening = this.openManifest(this.url.Path.toString());\n\t\t} else {\n\t\t\tthis.url = new Url(input);\n\t\t\topening = this.openContainer(CONTAINER_PATH)\n\t\t\t\t.then(this.openPackaging.bind(this));\n\t\t}\n\n\t\treturn opening;\n\t}\n\n\t/**\n\t * Open an archived epub\n\t * @private\n\t * @param  {binary} data\n\t * @param  {string} [encoding]\n\t * @return {Promise}\n\t */\n\topenEpub(data, encoding) {\n\t\treturn this.unarchive(data, encoding || this.settings.encoding)\n\t\t\t.then(() => {\n\t\t\t\treturn this.openContainer(CONTAINER_PATH);\n\t\t\t})\n\t\t\t.then((packagePath) => {\n\t\t\t\treturn this.openPackaging(packagePath);\n\t\t\t});\n\t}\n\n\t/**\n\t * Open the epub container\n\t * @private\n\t * @param  {string} url\n\t * @return {string} packagePath\n\t */\n\topenContainer(url) {\n\t\treturn this.load(url)\n\t\t\t.then((xml) => {\n\t\t\t\tthis.container = new Container(xml);\n\t\t\t\treturn this.resolve(this.container.packagePath);\n\t\t\t});\n\t}\n\n\t/**\n\t * Open the Open Packaging Format Xml\n\t * @private\n\t * @param  {string} url\n\t * @return {Promise}\n\t */\n\topenPackaging(url) {\n\t\tthis.path = new Path(url);\n\t\treturn this.load(url)\n\t\t\t.then((xml) => {\n\t\t\t\tthis.packaging = new Packaging(xml);\n\t\t\t\treturn this.unpack(this.packaging);\n\t\t\t});\n\t}\n\n\t/**\n\t * Open the manifest JSON\n\t * @private\n\t * @param  {string} url\n\t * @return {Promise}\n\t */\n\topenManifest(url) {\n\t\tthis.path = new Path(url);\n\t\treturn this.load(url)\n\t\t\t.then((json) => {\n\t\t\t\tthis.packaging = new Packaging();\n\t\t\t\tthis.packaging.load(json);\n\t\t\t\treturn this.unpack(this.packaging);\n\t\t\t});\n\t}\n\n\t/**\n\t * Load a resource from the Book\n\t * @param  {string} path path to the resource to load\n\t * @return {Promise}     returns a promise with the requested resource\n\t */\n\tload(path) {\n\t\tvar resolved = this.resolve(path);\n\t\tif(this.archived) {\n\t\t\treturn this.archive.request(resolved);\n\t\t} else {\n\t\t\treturn this.request(resolved, null, this.settings.requestCredentials, this.settings.requestHeaders);\n\t\t}\n\t}\n\n\t/**\n\t * Resolve a path to it's absolute position in the Book\n\t * @param  {string} path\n\t * @param  {boolean} [absolute] force resolving the full URL\n\t * @return {string}          the resolved path string\n\t */\n\tresolve(path, absolute) {\n\t\tif (!path) {\n\t\t\treturn;\n\t\t}\n\t\tvar resolved = path;\n\t\tvar isAbsolute = (path.indexOf(\"://\") > -1);\n\n\t\tif (isAbsolute) {\n\t\t\treturn path;\n\t\t}\n\n\t\tif (this.path) {\n\t\t\tresolved = this.path.resolve(path);\n\t\t}\n\n\t\tif(absolute != false && this.url) {\n\t\t\tresolved = this.url.resolve(resolved);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\t/**\n\t * Get a canonical link to a path\n\t * @param  {string} path\n\t * @return {string} the canonical path string\n\t */\n\tcanonical(path) {\n\t\tvar url = path;\n\n\t\tif (!path) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (this.settings.canonical) {\n\t\t\turl = this.settings.canonical(path);\n\t\t} else {\n\t\t\turl = this.resolve(path, true);\n\t\t}\n\n\t\treturn url;\n\t}\n\n\t/**\n\t * Determine the type of they input passed to open\n\t * @private\n\t * @param  {string} input\n\t * @return {string}  binary | directory | epub | opf\n\t */\n\tdetermineType(input) {\n\t\tvar url;\n\t\tvar path;\n\t\tvar extension;\n\n\t\tif (this.settings.encoding === \"base64\") {\n\t\t\treturn INPUT_TYPE.BASE64;\n\t\t}\n\n\t\tif(typeof(input) != \"string\") {\n\t\t\treturn INPUT_TYPE.BINARY;\n\t\t}\n\n\t\turl = new Url(input);\n\t\tpath = url.path();\n\t\textension = path.extension;\n\n\t\t// If there's a search string, remove it before determining type\n\t\tif (extension) {\n\t\t\textension = extension.replace(/\\?.*$/, \"\");\n\t\t}\n\n\t\tif (!extension) {\n\t\t\treturn INPUT_TYPE.DIRECTORY;\n\t\t}\n\n\t\tif(extension === \"epub\"){\n\t\t\treturn INPUT_TYPE.EPUB;\n\t\t}\n\n\t\tif(extension === \"opf\"){\n\t\t\treturn INPUT_TYPE.OPF;\n\t\t}\n\n\t\tif(extension === \"json\"){\n\t\t\treturn INPUT_TYPE.MANIFEST;\n\t\t}\n\t}\n\n\n\t/**\n\t * unpack the contents of the Books packaging\n\t * @private\n\t * @param {Packaging} packaging object\n\t */\n\tunpack(packaging) {\n\t\tthis.package = packaging; //TODO: deprecated this\n\n\t\tif (this.packaging.metadata.layout === \"\") {\n\t\t\t// rendition:layout not set - check display options if book is pre-paginated\n\t\t\tthis.load(this.url.resolve(IBOOKS_DISPLAY_OPTIONS_PATH)).then((xml) => {\n\t\t\t\tthis.displayOptions = new DisplayOptions(xml);\n\t\t\t\tthis.loading.displayOptions.resolve(this.displayOptions);\n\t\t\t}).catch((err) => {\n\t\t\t\tthis.displayOptions = new DisplayOptions();\n\t\t\t\tthis.loading.displayOptions.resolve(this.displayOptions);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.displayOptions = new DisplayOptions();\n\t\t\tthis.loading.displayOptions.resolve(this.displayOptions);\n\t\t}\n\n\t\tthis.spine.unpack(this.packaging, this.resolve.bind(this), this.canonical.bind(this));\n\n\t\tthis.resources = new Resources(this.packaging.manifest, {\n\t\t\tarchive: this.archive,\n\t\t\tresolver: this.resolve.bind(this),\n\t\t\trequest: this.request.bind(this),\n\t\t\treplacements: this.settings.replacements || (this.archived ? \"blobUrl\" : \"base64\")\n\t\t});\n\n\t\tthis.loadNavigation(this.packaging).then(() => {\n\t\t\t// this.toc = this.navigation.toc;\n\t\t\tthis.loading.navigation.resolve(this.navigation);\n\t\t});\n\n\t\tif (this.packaging.coverPath) {\n\t\t\tthis.cover = this.resolve(this.packaging.coverPath);\n\t\t}\n\t\t// Resolve promises\n\t\tthis.loading.manifest.resolve(this.packaging.manifest);\n\t\tthis.loading.metadata.resolve(this.packaging.metadata);\n\t\tthis.loading.spine.resolve(this.spine);\n\t\tthis.loading.cover.resolve(this.cover);\n\t\tthis.loading.resources.resolve(this.resources);\n\t\tthis.loading.pageList.resolve(this.pageList);\n\n\t\tthis.isOpen = true;\n\n\t\tif(this.archived || this.settings.replacements && this.settings.replacements != \"none\") {\n\t\t\tthis.replacements().then(() => {\n\t\t\t\tthis.loaded.displayOptions.then(() => {\n\t\t\t\t\tthis.opening.resolve(this);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t\t} else {\n\t\t\t// Resolve book opened promise\n\t\t\tthis.loaded.displayOptions.then(() => {\n\t\t\t\tthis.opening.resolve(this);\n\t\t\t});\n\t\t}\n\n\t}\n\n\t/**\n\t * Load Navigation and PageList from package\n\t * @private\n\t * @param {Packaging} packaging\n\t */\n\tloadNavigation(packaging) {\n\t\tlet navPath = packaging.navPath || packaging.ncxPath;\n\t\tlet toc = packaging.toc;\n\n\t\t// From json manifest\n\t\tif (toc) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.navigation = new Navigation(toc);\n\n\t\t\t\tif (packaging.pageList) {\n\t\t\t\t\tthis.pageList = new PageList(packaging.pageList); // TODO: handle page lists from Manifest\n\t\t\t\t}\n\n\t\t\t\tresolve(this.navigation);\n\t\t\t});\n\t\t}\n\n\t\tif (!navPath) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.navigation = new Navigation();\n\t\t\t\tthis.pageList = new PageList();\n\n\t\t\t\tresolve(this.navigation);\n\t\t\t});\n\t\t}\n\n\t\treturn this.load(navPath, \"xml\")\n\t\t\t.then((xml) => {\n\t\t\t\tthis.navigation = new Navigation(xml);\n\t\t\t\tthis.pageList = new PageList(xml);\n\t\t\t\treturn this.navigation;\n\t\t\t});\n\t}\n\n\t/**\n\t * Gets a Section of the Book from the Spine\n\t * Alias for `book.spine.get`\n\t * @param {string} target\n\t * @return {Section}\n\t */\n\tsection(target) {\n\t\treturn this.spine.get(target);\n\t}\n\n\t/**\n\t * Sugar to render a book to an element\n\t * @param  {element | string} element element or string to add a rendition to\n\t * @param  {object} [options]\n\t * @return {Rendition}\n\t */\n\trenderTo(element, options) {\n\t\tthis.rendition = new Rendition(this, options);\n\t\tthis.rendition.attachTo(element);\n\n\t\treturn this.rendition;\n\t}\n\n\t/**\n\t * Set if request should use withCredentials\n\t * @param {boolean} credentials\n\t */\n\tsetRequestCredentials(credentials) {\n\t\tthis.settings.requestCredentials = credentials;\n\t}\n\n\t/**\n\t * Set headers request should use\n\t * @param {object} headers\n\t */\n\tsetRequestHeaders(headers) {\n\t\tthis.settings.requestHeaders = headers;\n\t}\n\n\t/**\n\t * Unarchive a zipped epub\n\t * @private\n\t * @param  {binary} input epub data\n\t * @param  {string} [encoding]\n\t * @return {Archive}\n\t */\n\tunarchive(input, encoding) {\n\t\tthis.archive = new Archive();\n\t\treturn this.archive.open(input, encoding);\n\t}\n\n\t/**\n\t * Store the epubs contents\n\t * @private\n\t * @param  {binary} input epub data\n\t * @param  {string} [encoding]\n\t * @return {Store}\n\t */\n\tstore(name) {\n\t\t// Use \"blobUrl\" or \"base64\" for replacements\n\t\tlet replacementsSetting = this.settings.replacements && this.settings.replacements !== \"none\";\n\t\t// Save original url\n\t\tlet originalUrl = this.url;\n\t\t// Save original request method\n\t\tlet requester = this.settings.requestMethod || request.bind(this);\n\t\t// Create new Store\n\t\tthis.storage = new Store(name, requester, this.resolve.bind(this));\n\t\t// Replace request method to go through store\n\t\tthis.request = this.storage.request.bind(this.storage);\n\n\t\tthis.opened.then(() => {\n\t\t\tif (this.archived) {\n\t\t\t\tthis.storage.requester = this.archive.request.bind(this.archive);\n\t\t\t}\n\t\t\t// Substitute hook\n\t\t\tlet substituteResources = (output, section) => {\n\t\t\t\tsection.output = this.resources.substitute(output, section.url);\n\t\t\t};\n\n\t\t\t// Set to use replacements\n\t\t\tthis.resources.settings.replacements = replacementsSetting || \"blobUrl\";\n\t\t\t// Create replacement urls\n\t\t\tthis.resources.replacements().\n\t\t\t\tthen(() => {\n\t\t\t\t\treturn this.resources.replaceCss();\n\t\t\t\t});\n\n\t\t\tthis.storage.on(\"offline\", () => {\n\t\t\t\t// Remove url to use relative resolving for hrefs\n\t\t\t\tthis.url = new Url(\"/\", \"\");\n\t\t\t\t// Add hook to replace resources in contents\n\t\t\t\tthis.spine.hooks.serialize.register(substituteResources);\n\t\t\t});\n\n\t\t\tthis.storage.on(\"online\", () => {\n\t\t\t\t// Restore original url\n\t\t\t\tthis.url = originalUrl;\n\t\t\t\t// Remove hook\n\t\t\t\tthis.spine.hooks.serialize.deregister(substituteResources);\n\t\t\t});\n\n\t\t});\n\n\t\treturn this.storage;\n\t}\n\n\t/**\n\t * Get the cover url\n\t * @return {Promise<?string>} coverUrl\n\t */\n\tcoverUrl() {\n\t\treturn this.loaded.cover.then(() => {\n\t\t\tif (!this.cover) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (this.archived) {\n\t\t\t\treturn this.archive.createUrl(this.cover);\n\t\t\t} else {\n\t\t\t\treturn this.cover;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Load replacement urls\n\t * @private\n\t * @return {Promise} completed loading urls\n\t */\n\treplacements() {\n\t\tthis.spine.hooks.serialize.register((output, section) => {\n\t\t\tsection.output = this.resources.substitute(output, section.url);\n\t\t});\n\n\t\treturn this.resources.replacements().\n\t\t\tthen(() => {\n\t\t\t\treturn this.resources.replaceCss();\n\t\t\t});\n\t}\n\n\t/**\n\t * Find a DOM Range for a given CFI Range\n\t * @param  {EpubCFI} cfiRange a epub cfi range\n\t * @return {Promise}\n\t */\n\tgetRange(cfiRange) {\n\t\tvar cfi = new EpubCFI(cfiRange);\n\t\tvar item = this.spine.get(cfi.spinePos);\n\t\tvar _request = this.load.bind(this);\n\t\tif (!item) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\treject(\"CFI could not be found\");\n\t\t\t});\n\t\t}\n\t\treturn item.load(_request).then(function (contents) {\n\t\t\tvar range = cfi.toRange(item.document);\n\t\t\treturn range;\n\t\t});\n\t}\n\n\t/**\n\t * Generates the Book Key using the identifier in the manifest or other string provided\n\t * @param  {string} [identifier] to use instead of metadata identifier\n\t * @return {string} key\n\t */\n\tkey(identifier) {\n\t\tvar ident = identifier || this.packaging.metadata.identifier || this.url.filename;\n\t\treturn `epubjs:${EPUBJS_VERSION}:${ident}`;\n\t}\n\n\t/**\n\t * Destroy the Book and all associated objects\n\t */\n\tdestroy() {\n\t\tthis.opened = undefined;\n\t\tthis.loading = undefined;\n\t\tthis.loaded = undefined;\n\t\tthis.ready = undefined;\n\n\t\tthis.isOpen = false;\n\t\tthis.isRendered = false;\n\n\t\tthis.spine && this.spine.destroy();\n\t\tthis.locations && this.locations.destroy();\n\t\tthis.pageList && this.pageList.destroy();\n\t\tthis.archive && this.archive.destroy();\n\t\tthis.resources && this.resources.destroy();\n\t\tthis.container && this.container.destroy();\n\t\tthis.packaging && this.packaging.destroy();\n\t\tthis.rendition && this.rendition.destroy();\n\t\tthis.displayOptions && this.displayOptions.destroy();\n\n\t\tthis.spine = undefined;\n\t\tthis.locations = undefined;\n\t\tthis.pageList = undefined;\n\t\tthis.archive = undefined;\n\t\tthis.resources = undefined;\n\t\tthis.container = undefined;\n\t\tthis.packaging = undefined;\n\t\tthis.rendition = undefined;\n\n\t\tthis.navigation = undefined;\n\t\tthis.url = undefined;\n\t\tthis.path = undefined;\n\t\tthis.archived = false;\n\t}\n\n}\n\n//-- Enable binding events to book\nEventEmitter(Book.prototype);\n\nexport default Book;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}