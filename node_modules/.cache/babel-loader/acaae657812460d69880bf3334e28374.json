{"ast":null,"code":"import EventEmitter from \"event-emitter\";\nimport EpubCFI from \"./epubcfi\";\nimport { EVENTS } from \"./utils/constants\";\n\n/**\n\t* Handles managing adding & removing Annotations\n\t* @param {Rendition} rendition\n\t* @class\n\t*/\nclass Annotations {\n  constructor(rendition) {\n    this.rendition = rendition;\n    this.highlights = [];\n    this.underlines = [];\n    this.marks = [];\n    this._annotations = {};\n    this._annotationsBySectionIndex = {};\n    this.rendition.hooks.render.register(this.inject.bind(this));\n    this.rendition.hooks.unloaded.register(this.clear.bind(this));\n  }\n\n  /**\n   * Add an annotation to store\n   * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n   * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n   * @param {object} data Data to assign to annotation\n   * @param {function} [cb] Callback after annotation is added\n   * @param {string} className CSS class to assign to annotation\n   * @param {object} styles CSS styles to assign to annotation\n   * @returns {Annotation} annotation\n   */\n  add(type, cfiRange, data, cb, className, styles) {\n    let hash = encodeURI(cfiRange + type);\n    let cfi = new EpubCFI(cfiRange);\n    let sectionIndex = cfi.spinePos;\n    let annotation = new Annotation({\n      type,\n      cfiRange,\n      data,\n      sectionIndex,\n      cb,\n      className,\n      styles\n    });\n    this._annotations[hash] = annotation;\n    if (sectionIndex in this._annotationsBySectionIndex) {\n      this._annotationsBySectionIndex[sectionIndex].push(hash);\n    } else {\n      this._annotationsBySectionIndex[sectionIndex] = [hash];\n    }\n    let views = this.rendition.views();\n    views.forEach(view => {\n      if (annotation.sectionIndex === view.index) {\n        annotation.attach(view);\n      }\n    });\n    return annotation;\n  }\n\n  /**\n   * Remove an annotation from store\n   * @param {EpubCFI} cfiRange EpubCFI range the annotation is attached to\n   * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n   */\n  remove(cfiRange, type) {\n    let hash = encodeURI(cfiRange + type);\n    if (hash in this._annotations) {\n      let annotation = this._annotations[hash];\n      if (type && annotation.type !== type) {\n        return;\n      }\n      let views = this.rendition.views();\n      views.forEach(view => {\n        this._removeFromAnnotationBySectionIndex(annotation.sectionIndex, hash);\n        if (annotation.sectionIndex === view.index) {\n          annotation.detach(view);\n        }\n      });\n      delete this._annotations[hash];\n    }\n  }\n\n  /**\n   * Remove an annotations by Section Index\n   * @private\n   */\n  _removeFromAnnotationBySectionIndex(sectionIndex, hash) {\n    this._annotationsBySectionIndex[sectionIndex] = this._annotationsAt(sectionIndex).filter(h => h !== hash);\n  }\n\n  /**\n   * Get annotations by Section Index\n   * @private\n   */\n  _annotationsAt(index) {\n    return this._annotationsBySectionIndex[index];\n  }\n\n  /**\n   * Add a highlight to the store\n   * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n   * @param {object} data Data to assign to annotation\n   * @param {function} cb Callback after annotation is clicked\n   * @param {string} className CSS class to assign to annotation\n   * @param {object} styles CSS styles to assign to annotation\n   */\n  highlight(cfiRange, data, cb, className, styles) {\n    return this.add(\"highlight\", cfiRange, data, cb, className, styles);\n  }\n\n  /**\n   * Add a underline to the store\n   * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n   * @param {object} data Data to assign to annotation\n   * @param {function} cb Callback after annotation is clicked\n   * @param {string} className CSS class to assign to annotation\n   * @param {object} styles CSS styles to assign to annotation\n   */\n  underline(cfiRange, data, cb, className, styles) {\n    return this.add(\"underline\", cfiRange, data, cb, className, styles);\n  }\n\n  /**\n   * Add a mark to the store\n   * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n   * @param {object} data Data to assign to annotation\n   * @param {function} cb Callback after annotation is clicked\n   */\n  mark(cfiRange, data, cb) {\n    return this.add(\"mark\", cfiRange, data, cb);\n  }\n\n  /**\n   * iterate over annotations in the store\n   */\n  each() {\n    return this._annotations.forEach.apply(this._annotations, arguments);\n  }\n\n  /**\n   * Hook for injecting annotation into a view\n   * @param {View} view\n   * @private\n   */\n  inject(view) {\n    let sectionIndex = view.index;\n    if (sectionIndex in this._annotationsBySectionIndex) {\n      let annotations = this._annotationsBySectionIndex[sectionIndex];\n      annotations.forEach(hash => {\n        let annotation = this._annotations[hash];\n        annotation.attach(view);\n      });\n    }\n  }\n\n  /**\n   * Hook for removing annotation from a view\n   * @param {View} view\n   * @private\n   */\n  clear(view) {\n    let sectionIndex = view.index;\n    if (sectionIndex in this._annotationsBySectionIndex) {\n      let annotations = this._annotationsBySectionIndex[sectionIndex];\n      annotations.forEach(hash => {\n        let annotation = this._annotations[hash];\n        annotation.detach(view);\n      });\n    }\n  }\n\n  /**\n   * [Not Implemented] Show annotations\n   * @TODO: needs implementation in View\n   */\n  show() {}\n\n  /**\n   * [Not Implemented] Hide annotations\n   * @TODO: needs implementation in View\n   */\n  hide() {}\n}\n\n/**\n * Annotation object\n * @class\n * @param {object} options\n * @param {string} options.type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n * @param {EpubCFI} options.cfiRange EpubCFI range to attach annotation to\n * @param {object} options.data Data to assign to annotation\n * @param {int} options.sectionIndex Index in the Spine of the Section annotation belongs to\n * @param {function} [options.cb] Callback after annotation is clicked\n * @param {string} className CSS class to assign to annotation\n * @param {object} styles CSS styles to assign to annotation\n * @returns {Annotation} annotation\n */\nclass Annotation {\n  constructor(_ref) {\n    let {\n      type,\n      cfiRange,\n      data,\n      sectionIndex,\n      cb,\n      className,\n      styles\n    } = _ref;\n    this.type = type;\n    this.cfiRange = cfiRange;\n    this.data = data;\n    this.sectionIndex = sectionIndex;\n    this.mark = undefined;\n    this.cb = cb;\n    this.className = className;\n    this.styles = styles;\n  }\n\n  /**\n   * Update stored data\n   * @param {object} data\n   */\n  update(data) {\n    this.data = data;\n  }\n\n  /**\n   * Add to a view\n   * @param {View} view\n   */\n  attach(view) {\n    let {\n      cfiRange,\n      data,\n      type,\n      mark,\n      cb,\n      className,\n      styles\n    } = this;\n    let result;\n    if (type === \"highlight\") {\n      result = view.highlight(cfiRange, data, cb, className, styles);\n    } else if (type === \"underline\") {\n      result = view.underline(cfiRange, data, cb, className, styles);\n    } else if (type === \"mark\") {\n      result = view.mark(cfiRange, data, cb);\n    }\n    this.mark = result;\n    this.emit(EVENTS.ANNOTATION.ATTACH, result);\n    return result;\n  }\n\n  /**\n   * Remove from a view\n   * @param {View} view\n   */\n  detach(view) {\n    let {\n      cfiRange,\n      type\n    } = this;\n    let result;\n    if (view) {\n      if (type === \"highlight\") {\n        result = view.unhighlight(cfiRange);\n      } else if (type === \"underline\") {\n        result = view.ununderline(cfiRange);\n      } else if (type === \"mark\") {\n        result = view.unmark(cfiRange);\n      }\n    }\n    this.mark = undefined;\n    this.emit(EVENTS.ANNOTATION.DETACH, result);\n    return result;\n  }\n\n  /**\n   * [Not Implemented] Get text of an annotation\n   * @TODO: needs implementation in contents\n   */\n  text() {}\n}\nEventEmitter(Annotation.prototype);\nexport default Annotations;","map":{"version":3,"names":["EventEmitter","EpubCFI","EVENTS","Annotations","constructor","rendition","highlights","underlines","marks","_annotations","_annotationsBySectionIndex","hooks","render","register","inject","bind","unloaded","clear","add","type","cfiRange","data","cb","className","styles","hash","encodeURI","cfi","sectionIndex","spinePos","annotation","Annotation","push","views","forEach","view","index","attach","remove","_removeFromAnnotationBySectionIndex","detach","_annotationsAt","filter","h","highlight","underline","mark","each","apply","arguments","annotations","show","hide","undefined","update","result","emit","ANNOTATION","ATTACH","unhighlight","ununderline","unmark","DETACH","text","prototype"],"sources":["/home/parallels/Downloads/react-epub-viewer-demo/node_modules/epubjs/src/annotations.js"],"sourcesContent":["import EventEmitter from \"event-emitter\";\nimport EpubCFI from \"./epubcfi\";\nimport { EVENTS } from \"./utils/constants\";\n\n/**\n\t* Handles managing adding & removing Annotations\n\t* @param {Rendition} rendition\n\t* @class\n\t*/\nclass Annotations {\n\n\tconstructor (rendition) {\n\t\tthis.rendition = rendition;\n\t\tthis.highlights = [];\n\t\tthis.underlines = [];\n\t\tthis.marks = [];\n\t\tthis._annotations = {};\n\t\tthis._annotationsBySectionIndex = {};\n\n\t\tthis.rendition.hooks.render.register(this.inject.bind(this));\n\t\tthis.rendition.hooks.unloaded.register(this.clear.bind(this));\n\t}\n\n\t/**\n\t * Add an annotation to store\n\t * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} [cb] Callback after annotation is added\n\t * @param {string} className CSS class to assign to annotation\n\t * @param {object} styles CSS styles to assign to annotation\n\t * @returns {Annotation} annotation\n\t */\n\tadd (type, cfiRange, data, cb, className, styles) {\n\t\tlet hash = encodeURI(cfiRange + type);\n\t\tlet cfi = new EpubCFI(cfiRange);\n\t\tlet sectionIndex = cfi.spinePos;\n\t\tlet annotation = new Annotation({\n\t\t\ttype,\n\t\t\tcfiRange,\n\t\t\tdata,\n\t\t\tsectionIndex,\n\t\t\tcb,\n\t\t\tclassName,\n\t\t\tstyles\n\t\t});\n\n\t\tthis._annotations[hash] = annotation;\n\n\t\tif (sectionIndex in this._annotationsBySectionIndex) {\n\t\t\tthis._annotationsBySectionIndex[sectionIndex].push(hash);\n\t\t} else {\n\t\t\tthis._annotationsBySectionIndex[sectionIndex] = [hash];\n\t\t}\n\n\t\tlet views = this.rendition.views();\n\n\t\tviews.forEach( (view) => {\n\t\t\tif (annotation.sectionIndex === view.index) {\n\t\t\t\tannotation.attach(view);\n\t\t\t}\n\t\t});\n\n\t\treturn annotation;\n\t}\n\n\t/**\n\t * Remove an annotation from store\n\t * @param {EpubCFI} cfiRange EpubCFI range the annotation is attached to\n\t * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n\t */\n\tremove (cfiRange, type) {\n\t\tlet hash = encodeURI(cfiRange + type);\n\n\t\tif (hash in this._annotations) {\n\t\t\tlet annotation = this._annotations[hash];\n\n\t\t\tif (type && annotation.type !== type) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet views = this.rendition.views();\n\t\t\tviews.forEach( (view) => {\n\t\t\t\tthis._removeFromAnnotationBySectionIndex(annotation.sectionIndex, hash);\n\t\t\t\tif (annotation.sectionIndex === view.index) {\n\t\t\t\t\tannotation.detach(view);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdelete this._annotations[hash];\n\t\t}\n\t}\n\n\t/**\n\t * Remove an annotations by Section Index\n\t * @private\n\t */\n\t_removeFromAnnotationBySectionIndex (sectionIndex, hash) {\n\t\tthis._annotationsBySectionIndex[sectionIndex] = this._annotationsAt(sectionIndex).filter(h => h !== hash);\n\t}\n\n\t/**\n\t * Get annotations by Section Index\n\t * @private\n\t */\n\t_annotationsAt (index) {\n\t\treturn this._annotationsBySectionIndex[index];\n\t}\n\n\n\t/**\n\t * Add a highlight to the store\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} cb Callback after annotation is clicked\n\t * @param {string} className CSS class to assign to annotation\n\t * @param {object} styles CSS styles to assign to annotation\n\t */\n\thighlight (cfiRange, data, cb, className, styles) {\n\t\treturn this.add(\"highlight\", cfiRange, data, cb, className, styles);\n\t}\n\n\t/**\n\t * Add a underline to the store\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} cb Callback after annotation is clicked\n\t * @param {string} className CSS class to assign to annotation\n\t * @param {object} styles CSS styles to assign to annotation\n\t */\n\tunderline (cfiRange, data, cb, className, styles) {\n\t\treturn this.add(\"underline\", cfiRange, data, cb, className, styles);\n\t}\n\n\t/**\n\t * Add a mark to the store\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} cb Callback after annotation is clicked\n\t */\n\tmark (cfiRange, data, cb) {\n\t\treturn this.add(\"mark\", cfiRange, data, cb);\n\t}\n\n\t/**\n\t * iterate over annotations in the store\n\t */\n\teach () {\n\t\treturn this._annotations.forEach.apply(this._annotations, arguments);\n\t}\n\n\t/**\n\t * Hook for injecting annotation into a view\n\t * @param {View} view\n\t * @private\n\t */\n\tinject (view) {\n\t\tlet sectionIndex = view.index;\n\t\tif (sectionIndex in this._annotationsBySectionIndex) {\n\t\t\tlet annotations = this._annotationsBySectionIndex[sectionIndex];\n\t\t\tannotations.forEach((hash) => {\n\t\t\t\tlet annotation = this._annotations[hash];\n\t\t\t\tannotation.attach(view);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Hook for removing annotation from a view\n\t * @param {View} view\n\t * @private\n\t */\n\tclear (view) {\n\t\tlet sectionIndex = view.index;\n\t\tif (sectionIndex in this._annotationsBySectionIndex) {\n\t\t\tlet annotations = this._annotationsBySectionIndex[sectionIndex];\n\t\t\tannotations.forEach((hash) => {\n\t\t\t\tlet annotation = this._annotations[hash];\n\t\t\t\tannotation.detach(view);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * [Not Implemented] Show annotations\n\t * @TODO: needs implementation in View\n\t */\n\tshow () {\n\n\t}\n\n\t/**\n\t * [Not Implemented] Hide annotations\n\t * @TODO: needs implementation in View\n\t */\n\thide () {\n\n\t}\n\n}\n\n/**\n * Annotation object\n * @class\n * @param {object} options\n * @param {string} options.type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n * @param {EpubCFI} options.cfiRange EpubCFI range to attach annotation to\n * @param {object} options.data Data to assign to annotation\n * @param {int} options.sectionIndex Index in the Spine of the Section annotation belongs to\n * @param {function} [options.cb] Callback after annotation is clicked\n * @param {string} className CSS class to assign to annotation\n * @param {object} styles CSS styles to assign to annotation\n * @returns {Annotation} annotation\n */\nclass Annotation {\n\n\tconstructor ({\n\t\ttype,\n\t\tcfiRange,\n\t\tdata,\n\t\tsectionIndex,\n\t\tcb,\n\t\tclassName,\n\t\tstyles\n\t}) {\n\t\tthis.type = type;\n\t\tthis.cfiRange = cfiRange;\n\t\tthis.data = data;\n\t\tthis.sectionIndex = sectionIndex;\n\t\tthis.mark = undefined;\n\t\tthis.cb = cb;\n\t\tthis.className = className;\n\t\tthis.styles = styles;\n\t}\n\n\t/**\n\t * Update stored data\n\t * @param {object} data\n\t */\n\tupdate (data) {\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Add to a view\n\t * @param {View} view\n\t */\n\tattach (view) {\n\t\tlet {cfiRange, data, type, mark, cb, className, styles} = this;\n\t\tlet result;\n\n\t\tif (type === \"highlight\") {\n\t\t\tresult = view.highlight(cfiRange, data, cb, className, styles);\n\t\t} else if (type === \"underline\") {\n\t\t\tresult = view.underline(cfiRange, data, cb, className, styles);\n\t\t} else if (type === \"mark\") {\n\t\t\tresult = view.mark(cfiRange, data, cb);\n\t\t}\n\n\t\tthis.mark = result;\n\t\tthis.emit(EVENTS.ANNOTATION.ATTACH, result);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Remove from a view\n\t * @param {View} view\n\t */\n\tdetach (view) {\n\t\tlet {cfiRange, type} = this;\n\t\tlet result;\n\n\t\tif (view) {\n\t\t\tif (type === \"highlight\") {\n\t\t\t\tresult = view.unhighlight(cfiRange);\n\t\t\t} else if (type === \"underline\") {\n\t\t\t\tresult = view.ununderline(cfiRange);\n\t\t\t} else if (type === \"mark\") {\n\t\t\t\tresult = view.unmark(cfiRange);\n\t\t\t}\n\t\t}\n\n\t\tthis.mark = undefined;\n\t\tthis.emit(EVENTS.ANNOTATION.DETACH, result);\n\t\treturn result;\n\t}\n\n\t/**\n\t * [Not Implemented] Get text of an annotation\n\t * @TODO: needs implementation in contents\n\t */\n\ttext () {\n\n\t}\n\n}\n\nEventEmitter(Annotation.prototype);\n\n\nexport default Annotations\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}