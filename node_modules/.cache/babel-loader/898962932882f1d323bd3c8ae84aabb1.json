{"ast":null,"code":"import { defer, isXml, parse } from \"./core\";\nimport Path from \"./path\";\nfunction request(url, type, withCredentials, headers) {\n  var supportsURL = typeof window != \"undefined\" ? window.URL : false; // TODO: fallback for url if window isn't defined\n  var BLOB_RESPONSE = supportsURL ? \"blob\" : \"arraybuffer\";\n  var deferred = new defer();\n  var xhr = new XMLHttpRequest();\n\n  //-- Check from PDF.js:\n  //   https://github.com/mozilla/pdf.js/blob/master/web/compatibility.js\n  var xhrPrototype = XMLHttpRequest.prototype;\n  var header;\n  if (!(\"overrideMimeType\" in xhrPrototype)) {\n    // IE10 might have response, but not overrideMimeType\n    Object.defineProperty(xhrPrototype, \"overrideMimeType\", {\n      value: function xmlHttpRequestOverrideMimeType() {}\n    });\n  }\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n  xhr.onreadystatechange = handler;\n  xhr.onerror = err;\n  xhr.open(\"GET\", url, true);\n  for (header in headers) {\n    xhr.setRequestHeader(header, headers[header]);\n  }\n  if (type == \"json\") {\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n  }\n\n  // If type isn\"t set, determine it from the file extension\n  if (!type) {\n    type = new Path(url).extension;\n  }\n  if (type == \"blob\") {\n    xhr.responseType = BLOB_RESPONSE;\n  }\n  if (isXml(type)) {\n    // xhr.responseType = \"document\";\n    xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n  }\n\n  if (type == \"xhtml\") {\n    // xhr.responseType = \"document\";\n  }\n  if (type == \"html\" || type == \"htm\") {\n    // xhr.responseType = \"document\";\n  }\n  if (type == \"binary\") {\n    xhr.responseType = \"arraybuffer\";\n  }\n  xhr.send();\n  function err(e) {\n    deferred.reject(e);\n  }\n  function handler() {\n    if (this.readyState === XMLHttpRequest.DONE) {\n      var responseXML = false;\n      if (this.responseType === \"\" || this.responseType === \"document\") {\n        responseXML = this.responseXML;\n      }\n      if (this.status === 200 || this.status === 0 || responseXML) {\n        //-- Firefox is reporting 0 for blob urls\n        var r;\n        if (!this.response && !responseXML) {\n          deferred.reject({\n            status: this.status,\n            message: \"Empty Response\",\n            stack: new Error().stack\n          });\n          return deferred.promise;\n        }\n        if (this.status === 403) {\n          deferred.reject({\n            status: this.status,\n            response: this.response,\n            message: \"Forbidden\",\n            stack: new Error().stack\n          });\n          return deferred.promise;\n        }\n        if (responseXML) {\n          r = this.responseXML;\n        } else if (isXml(type)) {\n          // xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n          // If this.responseXML wasn't set, try to parse using a DOMParser from text\n          r = parse(this.response, \"text/xml\");\n        } else if (type == \"xhtml\") {\n          r = parse(this.response, \"application/xhtml+xml\");\n        } else if (type == \"html\" || type == \"htm\") {\n          r = parse(this.response, \"text/html\");\n        } else if (type == \"json\") {\n          r = JSON.parse(this.response);\n        } else if (type == \"blob\") {\n          if (supportsURL) {\n            r = this.response;\n          } else {\n            //-- Safari doesn't support responseType blob, so create a blob from arraybuffer\n            r = new Blob([this.response]);\n          }\n        } else {\n          r = this.response;\n        }\n        deferred.resolve(r);\n      } else {\n        deferred.reject({\n          status: this.status,\n          message: this.response,\n          stack: new Error().stack\n        });\n      }\n    }\n  }\n  return deferred.promise;\n}\nexport default request;","map":{"version":3,"names":["defer","isXml","parse","Path","request","url","type","withCredentials","headers","supportsURL","window","URL","BLOB_RESPONSE","deferred","xhr","XMLHttpRequest","xhrPrototype","prototype","header","Object","defineProperty","value","xmlHttpRequestOverrideMimeType","onreadystatechange","handler","onerror","err","open","setRequestHeader","extension","responseType","overrideMimeType","send","e","reject","readyState","DONE","responseXML","status","r","response","message","stack","Error","promise","JSON","Blob","resolve"],"sources":["/home/parallels/Downloads/read/node_modules/epubjs/src/utils/request.js"],"sourcesContent":["import {defer, isXml, parse} from \"./core\";\nimport Path from \"./path\";\n\nfunction request(url, type, withCredentials, headers) {\n\tvar supportsURL = (typeof window != \"undefined\") ? window.URL : false; // TODO: fallback for url if window isn't defined\n\tvar BLOB_RESPONSE = supportsURL ? \"blob\" : \"arraybuffer\";\n\n\tvar deferred = new defer();\n\n\tvar xhr = new XMLHttpRequest();\n\n\t//-- Check from PDF.js:\n\t//   https://github.com/mozilla/pdf.js/blob/master/web/compatibility.js\n\tvar xhrPrototype = XMLHttpRequest.prototype;\n\n\tvar header;\n\n\tif (!(\"overrideMimeType\" in xhrPrototype)) {\n\t\t// IE10 might have response, but not overrideMimeType\n\t\tObject.defineProperty(xhrPrototype, \"overrideMimeType\", {\n\t\t\tvalue: function xmlHttpRequestOverrideMimeType() {}\n\t\t});\n\t}\n\n\tif(withCredentials) {\n\t\txhr.withCredentials = true;\n\t}\n\n\txhr.onreadystatechange = handler;\n\txhr.onerror = err;\n\n\txhr.open(\"GET\", url, true);\n\n\tfor(header in headers) {\n\t\txhr.setRequestHeader(header, headers[header]);\n\t}\n\n\tif(type == \"json\") {\n\t\txhr.setRequestHeader(\"Accept\", \"application/json\");\n\t}\n\n\t// If type isn\"t set, determine it from the file extension\n\tif(!type) {\n\t\ttype = new Path(url).extension;\n\t}\n\n\tif(type == \"blob\"){\n\t\txhr.responseType = BLOB_RESPONSE;\n\t}\n\n\n\tif(isXml(type)) {\n\t\t// xhr.responseType = \"document\";\n\t\txhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n\t}\n\n\tif(type == \"xhtml\") {\n\t\t// xhr.responseType = \"document\";\n\t}\n\n\tif(type == \"html\" || type == \"htm\") {\n\t\t// xhr.responseType = \"document\";\n\t}\n\n\tif(type == \"binary\") {\n\t\txhr.responseType = \"arraybuffer\";\n\t}\n\n\txhr.send();\n\n\tfunction err(e) {\n\t\tdeferred.reject(e);\n\t}\n\n\tfunction handler() {\n\t\tif (this.readyState === XMLHttpRequest.DONE) {\n\t\t\tvar responseXML = false;\n\n\t\t\tif(this.responseType === \"\" || this.responseType === \"document\") {\n\t\t\t\tresponseXML = this.responseXML;\n\t\t\t}\n\n\t\t\tif (this.status === 200 || this.status === 0 || responseXML) { //-- Firefox is reporting 0 for blob urls\n\t\t\t\tvar r;\n\n\t\t\t\tif (!this.response && !responseXML) {\n\t\t\t\t\tdeferred.reject({\n\t\t\t\t\t\tstatus: this.status,\n\t\t\t\t\t\tmessage : \"Empty Response\",\n\t\t\t\t\t\tstack : new Error().stack\n\t\t\t\t\t});\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}\n\n\t\t\t\tif (this.status === 403) {\n\t\t\t\t\tdeferred.reject({\n\t\t\t\t\t\tstatus: this.status,\n\t\t\t\t\t\tresponse: this.response,\n\t\t\t\t\t\tmessage : \"Forbidden\",\n\t\t\t\t\t\tstack : new Error().stack\n\t\t\t\t\t});\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}\n\t\t\t\tif(responseXML){\n\t\t\t\t\tr = this.responseXML;\n\t\t\t\t} else\n\t\t\t\tif(isXml(type)){\n\t\t\t\t\t// xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n\t\t\t\t\t// If this.responseXML wasn't set, try to parse using a DOMParser from text\n\t\t\t\t\tr = parse(this.response, \"text/xml\");\n\t\t\t\t}else\n\t\t\t\tif(type == \"xhtml\"){\n\t\t\t\t\tr = parse(this.response, \"application/xhtml+xml\");\n\t\t\t\t}else\n\t\t\t\tif(type == \"html\" || type == \"htm\"){\n\t\t\t\t\tr = parse(this.response, \"text/html\");\n\t\t\t\t}else\n\t\t\t\tif(type == \"json\"){\n\t\t\t\t\tr = JSON.parse(this.response);\n\t\t\t\t}else\n\t\t\t\tif(type == \"blob\"){\n\n\t\t\t\t\tif(supportsURL) {\n\t\t\t\t\t\tr = this.response;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//-- Safari doesn't support responseType blob, so create a blob from arraybuffer\n\t\t\t\t\t\tr = new Blob([this.response]);\n\t\t\t\t\t}\n\n\t\t\t\t}else{\n\t\t\t\t\tr = this.response;\n\t\t\t\t}\n\n\t\t\t\tdeferred.resolve(r);\n\t\t\t} else {\n\n\t\t\t\tdeferred.reject({\n\t\t\t\t\tstatus: this.status,\n\t\t\t\t\tmessage : this.response,\n\t\t\t\t\tstack : new Error().stack\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deferred.promise;\n}\n\nexport default request;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}