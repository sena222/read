{"ast":null,"code":"import path from \"path-webpack\";\n\n/**\n * Creates a Path object for parsing and manipulation of a path strings\n *\n * Uses a polyfill for Nodejs path: https://nodejs.org/api/path.html\n * @param\t{string} pathString\ta url string (relative or absolute)\n * @class\n */\nclass Path {\n  constructor(pathString) {\n    var protocol;\n    var parsed;\n    protocol = pathString.indexOf(\"://\");\n    if (protocol > -1) {\n      pathString = new URL(pathString).pathname;\n    }\n    parsed = this.parse(pathString);\n    this.path = pathString;\n    if (this.isDirectory(pathString)) {\n      this.directory = pathString;\n    } else {\n      this.directory = parsed.dir + \"/\";\n    }\n    this.filename = parsed.base;\n    this.extension = parsed.ext.slice(1);\n  }\n\n  /**\n   * Parse the path: https://nodejs.org/api/path.html#path_path_parse_path\n   * @param\t{string} what\n   * @returns {object}\n   */\n  parse(what) {\n    return path.parse(what);\n  }\n\n  /**\n   * @param\t{string} what\n   * @returns {boolean}\n   */\n  isAbsolute(what) {\n    return path.isAbsolute(what || this.path);\n  }\n\n  /**\n   * Check if path ends with a directory\n   * @param\t{string} what\n   * @returns {boolean}\n   */\n  isDirectory(what) {\n    return what.charAt(what.length - 1) === \"/\";\n  }\n\n  /**\n   * Resolve a path against the directory of the Path\n   *\n   * https://nodejs.org/api/path.html#path_path_resolve_paths\n   * @param\t{string} what\n   * @returns {string} resolved\n   */\n  resolve(what) {\n    return path.resolve(this.directory, what);\n  }\n\n  /**\n   * Resolve a path relative to the directory of the Path\n   *\n   * https://nodejs.org/api/path.html#path_path_relative_from_to\n   * @param\t{string} what\n   * @returns {string} relative\n   */\n  relative(what) {\n    var isAbsolute = what && what.indexOf(\"://\") > -1;\n    if (isAbsolute) {\n      return what;\n    }\n    return path.relative(this.directory, what);\n  }\n  splitPath(filename) {\n    return this.splitPathRe.exec(filename).slice(1);\n  }\n\n  /**\n   * Return the path string\n   * @returns {string} path\n   */\n  toString() {\n    return this.path;\n  }\n}\nexport default Path;","map":{"version":3,"names":["path","Path","constructor","pathString","protocol","parsed","indexOf","URL","pathname","parse","isDirectory","directory","dir","filename","base","extension","ext","slice","what","isAbsolute","charAt","length","resolve","relative","splitPath","splitPathRe","exec","toString"],"sources":["/home/parallels/Downloads/react-epub-viewer-demo/node_modules/epubjs/src/utils/path.js"],"sourcesContent":["import path from \"path-webpack\";\n\n/**\n * Creates a Path object for parsing and manipulation of a path strings\n *\n * Uses a polyfill for Nodejs path: https://nodejs.org/api/path.html\n * @param\t{string} pathString\ta url string (relative or absolute)\n * @class\n */\nclass Path {\n\tconstructor(pathString) {\n\t\tvar protocol;\n\t\tvar parsed;\n\n\t\tprotocol = pathString.indexOf(\"://\");\n\t\tif (protocol > -1) {\n\t\t\tpathString = new URL(pathString).pathname;\n\t\t}\n\n\t\tparsed = this.parse(pathString);\n\n\t\tthis.path = pathString;\n\n\t\tif (this.isDirectory(pathString)) {\n\t\t\tthis.directory = pathString;\n\t\t} else {\n\t\t\tthis.directory = parsed.dir + \"/\";\n\t\t}\n\n\t\tthis.filename = parsed.base;\n\t\tthis.extension = parsed.ext.slice(1);\n\n\t}\n\n\t/**\n\t * Parse the path: https://nodejs.org/api/path.html#path_path_parse_path\n\t * @param\t{string} what\n\t * @returns {object}\n\t */\n\tparse (what) {\n\t\treturn path.parse(what);\n\t}\n\n\t/**\n\t * @param\t{string} what\n\t * @returns {boolean}\n\t */\n\tisAbsolute (what) {\n\t\treturn path.isAbsolute(what || this.path);\n\t}\n\n\t/**\n\t * Check if path ends with a directory\n\t * @param\t{string} what\n\t * @returns {boolean}\n\t */\n\tisDirectory (what) {\n\t\treturn (what.charAt(what.length-1) === \"/\");\n\t}\n\n\t/**\n\t * Resolve a path against the directory of the Path\n\t *\n\t * https://nodejs.org/api/path.html#path_path_resolve_paths\n\t * @param\t{string} what\n\t * @returns {string} resolved\n\t */\n\tresolve (what) {\n\t\treturn path.resolve(this.directory, what);\n\t}\n\n\t/**\n\t * Resolve a path relative to the directory of the Path\n\t *\n\t * https://nodejs.org/api/path.html#path_path_relative_from_to\n\t * @param\t{string} what\n\t * @returns {string} relative\n\t */\n\trelative (what) {\n\t\tvar isAbsolute = what && (what.indexOf(\"://\") > -1);\n\n\t\tif (isAbsolute) {\n\t\t\treturn what;\n\t\t}\n\n\t\treturn path.relative(this.directory, what);\n\t}\n\n\tsplitPath(filename) {\n\t\treturn this.splitPathRe.exec(filename).slice(1);\n\t}\n\n\t/**\n\t * Return the path string\n\t * @returns {string} path\n\t */\n\ttoString () {\n\t\treturn this.path;\n\t}\n}\n\nexport default Path;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,cAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EACVC,WAAW,CAACC,UAAU,EAAE;IACvB,IAAIC,QAAQ;IACZ,IAAIC,MAAM;IAEVD,QAAQ,GAAGD,UAAU,CAACG,OAAO,CAAC,KAAK,CAAC;IACpC,IAAIF,QAAQ,GAAG,CAAC,CAAC,EAAE;MAClBD,UAAU,GAAG,IAAII,GAAG,CAACJ,UAAU,CAAC,CAACK,QAAQ;IAC1C;IAEAH,MAAM,GAAG,IAAI,CAACI,KAAK,CAACN,UAAU,CAAC;IAE/B,IAAI,CAACH,IAAI,GAAGG,UAAU;IAEtB,IAAI,IAAI,CAACO,WAAW,CAACP,UAAU,CAAC,EAAE;MACjC,IAAI,CAACQ,SAAS,GAAGR,UAAU;IAC5B,CAAC,MAAM;MACN,IAAI,CAACQ,SAAS,GAAGN,MAAM,CAACO,GAAG,GAAG,GAAG;IAClC;IAEA,IAAI,CAACC,QAAQ,GAAGR,MAAM,CAACS,IAAI;IAC3B,IAAI,CAACC,SAAS,GAAGV,MAAM,CAACW,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;EAErC;;EAEA;AACD;AACA;AACA;AACA;EACCR,KAAK,CAAES,IAAI,EAAE;IACZ,OAAOlB,IAAI,CAACS,KAAK,CAACS,IAAI,CAAC;EACxB;;EAEA;AACD;AACA;AACA;EACCC,UAAU,CAAED,IAAI,EAAE;IACjB,OAAOlB,IAAI,CAACmB,UAAU,CAACD,IAAI,IAAI,IAAI,CAAClB,IAAI,CAAC;EAC1C;;EAEA;AACD;AACA;AACA;AACA;EACCU,WAAW,CAAEQ,IAAI,EAAE;IAClB,OAAQA,IAAI,CAACE,MAAM,CAACF,IAAI,CAACG,MAAM,GAAC,CAAC,CAAC,KAAK,GAAG;EAC3C;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,OAAO,CAAEJ,IAAI,EAAE;IACd,OAAOlB,IAAI,CAACsB,OAAO,CAAC,IAAI,CAACX,SAAS,EAAEO,IAAI,CAAC;EAC1C;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCK,QAAQ,CAAEL,IAAI,EAAE;IACf,IAAIC,UAAU,GAAGD,IAAI,IAAKA,IAAI,CAACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAE;IAEnD,IAAIa,UAAU,EAAE;MACf,OAAOD,IAAI;IACZ;IAEA,OAAOlB,IAAI,CAACuB,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEO,IAAI,CAAC;EAC3C;EAEAM,SAAS,CAACX,QAAQ,EAAE;IACnB,OAAO,IAAI,CAACY,WAAW,CAACC,IAAI,CAACb,QAAQ,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC;EAChD;;EAEA;AACD;AACA;AACA;EACCU,QAAQ,GAAI;IACX,OAAO,IAAI,CAAC3B,IAAI;EACjB;AACD;AAEA,eAAeC,IAAI"},"metadata":{},"sourceType":"module"}