{"ast":null,"code":"import { substitute } from \"./utils/replacements\";\nimport { createBase64Url, createBlobUrl, blob2base64 } from \"./utils/core\";\nimport Url from \"./utils/url\";\nimport mime from \"./utils/mime\";\nimport Path from \"./utils/path\";\nimport path from \"path-webpack\";\n\n/**\n * Handle Package Resources\n * @class\n * @param {Manifest} manifest\n * @param {object} [options]\n * @param {string} [options.replacements=\"base64\"]\n * @param {Archive} [options.archive]\n * @param {method} [options.resolver]\n */\nclass Resources {\n  constructor(manifest, options) {\n    this.settings = {\n      replacements: options && options.replacements || \"base64\",\n      archive: options && options.archive,\n      resolver: options && options.resolver,\n      request: options && options.request\n    };\n    this.process(manifest);\n  }\n\n  /**\n   * Process resources\n   * @param {Manifest} manifest\n   */\n  process(manifest) {\n    this.manifest = manifest;\n    this.resources = Object.keys(manifest).map(function (key) {\n      return manifest[key];\n    });\n    this.replacementUrls = [];\n    this.html = [];\n    this.assets = [];\n    this.css = [];\n    this.urls = [];\n    this.cssUrls = [];\n    this.split();\n    this.splitUrls();\n  }\n\n  /**\n   * Split resources by type\n   * @private\n   */\n  split() {\n    // HTML\n    this.html = this.resources.filter(function (item) {\n      if (item.type === \"application/xhtml+xml\" || item.type === \"text/html\") {\n        return true;\n      }\n    });\n\n    // Exclude HTML\n    this.assets = this.resources.filter(function (item) {\n      if (item.type !== \"application/xhtml+xml\" && item.type !== \"text/html\") {\n        return true;\n      }\n    });\n\n    // Only CSS\n    this.css = this.resources.filter(function (item) {\n      if (item.type === \"text/css\") {\n        return true;\n      }\n    });\n  }\n\n  /**\n   * Convert split resources into Urls\n   * @private\n   */\n  splitUrls() {\n    // All Assets Urls\n    this.urls = this.assets.map(function (item) {\n      return item.href;\n    }.bind(this));\n\n    // Css Urls\n    this.cssUrls = this.css.map(function (item) {\n      return item.href;\n    });\n  }\n\n  /**\n   * Create a url to a resource\n   * @param {string} url\n   * @return {Promise<string>} Promise resolves with url string\n   */\n  createUrl(url) {\n    var parsedUrl = new Url(url);\n    var mimeType = mime.lookup(parsedUrl.filename);\n    if (this.settings.archive) {\n      return this.settings.archive.createUrl(url, {\n        \"base64\": this.settings.replacements === \"base64\"\n      });\n    } else {\n      if (this.settings.replacements === \"base64\") {\n        return this.settings.request(url, 'blob').then(blob => {\n          return blob2base64(blob);\n        }).then(blob => {\n          return createBase64Url(blob, mimeType);\n        });\n      } else {\n        return this.settings.request(url, 'blob').then(blob => {\n          return createBlobUrl(blob, mimeType);\n        });\n      }\n    }\n  }\n\n  /**\n   * Create blob urls for all the assets\n   * @return {Promise}         returns replacement urls\n   */\n  replacements() {\n    if (this.settings.replacements === \"none\") {\n      return new Promise(function (resolve) {\n        resolve(this.urls);\n      }.bind(this));\n    }\n    var replacements = this.urls.map(url => {\n      var absolute = this.settings.resolver(url);\n      return this.createUrl(absolute).catch(err => {\n        console.error(err);\n        return null;\n      });\n    });\n    return Promise.all(replacements).then(replacementUrls => {\n      this.replacementUrls = replacementUrls.filter(url => {\n        return typeof url === \"string\";\n      });\n      return replacementUrls;\n    });\n  }\n\n  /**\n   * Replace URLs in CSS resources\n   * @private\n   * @param  {Archive} [archive]\n   * @param  {method} [resolver]\n   * @return {Promise}\n   */\n  replaceCss(archive, resolver) {\n    var replaced = [];\n    archive = archive || this.settings.archive;\n    resolver = resolver || this.settings.resolver;\n    this.cssUrls.forEach(function (href) {\n      var replacement = this.createCssFile(href, archive, resolver).then(function (replacementUrl) {\n        // switch the url in the replacementUrls\n        var indexInUrls = this.urls.indexOf(href);\n        if (indexInUrls > -1) {\n          this.replacementUrls[indexInUrls] = replacementUrl;\n        }\n      }.bind(this));\n      replaced.push(replacement);\n    }.bind(this));\n    return Promise.all(replaced);\n  }\n\n  /**\n   * Create a new CSS file with the replaced URLs\n   * @private\n   * @param  {string} href the original css file\n   * @return {Promise}  returns a BlobUrl to the new CSS file or a data url\n   */\n  createCssFile(href) {\n    var newUrl;\n    if (path.isAbsolute(href)) {\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n    var absolute = this.settings.resolver(href);\n\n    // Get the text of the css file from the archive\n    var textResponse;\n    if (this.settings.archive) {\n      textResponse = this.settings.archive.getText(absolute);\n    } else {\n      textResponse = this.settings.request(absolute, \"text\");\n    }\n\n    // Get asset links relative to css file\n    var relUrls = this.urls.map(assetHref => {\n      var resolved = this.settings.resolver(assetHref);\n      var relative = new Path(absolute).relative(resolved);\n      return relative;\n    });\n    if (!textResponse) {\n      // file not found, don't replace\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n    return textResponse.then(text => {\n      // Replacements in the css text\n      text = substitute(text, relUrls, this.replacementUrls);\n\n      // Get the new url\n      if (this.settings.replacements === \"base64\") {\n        newUrl = createBase64Url(text, \"text/css\");\n      } else {\n        newUrl = createBlobUrl(text, \"text/css\");\n      }\n      return newUrl;\n    }, err => {\n      // handle response errors\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Resolve all resources URLs relative to an absolute URL\n   * @param  {string} absolute to be resolved to\n   * @param  {resolver} [resolver]\n   * @return {string[]} array with relative Urls\n   */\n  relativeTo(absolute, resolver) {\n    resolver = resolver || this.settings.resolver;\n\n    // Get Urls relative to current sections\n    return this.urls.map(function (href) {\n      var resolved = resolver(href);\n      var relative = new Path(absolute).relative(resolved);\n      return relative;\n    }.bind(this));\n  }\n\n  /**\n   * Get a URL for a resource\n   * @param  {string} path\n   * @return {string} url\n   */\n  get(path) {\n    var indexInUrls = this.urls.indexOf(path);\n    if (indexInUrls === -1) {\n      return;\n    }\n    if (this.replacementUrls.length) {\n      return new Promise(function (resolve, reject) {\n        resolve(this.replacementUrls[indexInUrls]);\n      }.bind(this));\n    } else {\n      return this.createUrl(path);\n    }\n  }\n\n  /**\n   * Substitute urls in content, with replacements,\n   * relative to a url if provided\n   * @param  {string} content\n   * @param  {string} [url]   url to resolve to\n   * @return {string}         content with urls substituted\n   */\n  substitute(content, url) {\n    var relUrls;\n    if (url) {\n      relUrls = this.relativeTo(url);\n    } else {\n      relUrls = this.urls;\n    }\n    return substitute(content, relUrls, this.replacementUrls);\n  }\n  destroy() {\n    this.settings = undefined;\n    this.manifest = undefined;\n    this.resources = undefined;\n    this.replacementUrls = undefined;\n    this.html = undefined;\n    this.assets = undefined;\n    this.css = undefined;\n    this.urls = undefined;\n    this.cssUrls = undefined;\n  }\n}\nexport default Resources;","map":{"version":3,"names":["substitute","createBase64Url","createBlobUrl","blob2base64","Url","mime","Path","path","Resources","constructor","manifest","options","settings","replacements","archive","resolver","request","process","resources","Object","keys","map","key","replacementUrls","html","assets","css","urls","cssUrls","split","splitUrls","filter","item","type","href","bind","createUrl","url","parsedUrl","mimeType","lookup","filename","then","blob","Promise","resolve","absolute","catch","err","console","error","all","replaceCss","replaced","forEach","replacement","createCssFile","replacementUrl","indexInUrls","indexOf","push","newUrl","isAbsolute","textResponse","getText","relUrls","assetHref","resolved","relative","text","relativeTo","get","length","reject","content","destroy","undefined"],"sources":["/home/parallels/Downloads/react-epub-viewer-demo/node_modules/epubjs/src/resources.js"],"sourcesContent":["import {substitute} from \"./utils/replacements\";\nimport {createBase64Url, createBlobUrl, blob2base64} from \"./utils/core\";\nimport Url from \"./utils/url\";\nimport mime from \"./utils/mime\";\nimport Path from \"./utils/path\";\nimport path from \"path-webpack\";\n\n/**\n * Handle Package Resources\n * @class\n * @param {Manifest} manifest\n * @param {object} [options]\n * @param {string} [options.replacements=\"base64\"]\n * @param {Archive} [options.archive]\n * @param {method} [options.resolver]\n */\nclass Resources {\n\tconstructor(manifest, options) {\n\t\tthis.settings = {\n\t\t\treplacements: (options && options.replacements) || \"base64\",\n\t\t\tarchive: (options && options.archive),\n\t\t\tresolver: (options && options.resolver),\n\t\t\trequest: (options && options.request)\n\t\t};\n\n\t\tthis.process(manifest);\n\t}\n\n\t/**\n\t * Process resources\n\t * @param {Manifest} manifest\n\t */\n\tprocess(manifest){\n\t\tthis.manifest = manifest;\n\t\tthis.resources = Object.keys(manifest).\n\t\t\tmap(function (key){\n\t\t\t\treturn manifest[key];\n\t\t\t});\n\n\t\tthis.replacementUrls = [];\n\n\t\tthis.html = [];\n\t\tthis.assets = [];\n\t\tthis.css = [];\n\n\t\tthis.urls = [];\n\t\tthis.cssUrls = [];\n\n\t\tthis.split();\n\t\tthis.splitUrls();\n\t}\n\n\t/**\n\t * Split resources by type\n\t * @private\n\t */\n\tsplit(){\n\n\t\t// HTML\n\t\tthis.html = this.resources.\n\t\t\tfilter(function (item){\n\t\t\t\tif (item.type === \"application/xhtml+xml\" ||\n\t\t\t\t\t\titem.type === \"text/html\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Exclude HTML\n\t\tthis.assets = this.resources.\n\t\t\tfilter(function (item){\n\t\t\t\tif (item.type !== \"application/xhtml+xml\" &&\n\t\t\t\t\t\titem.type !== \"text/html\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Only CSS\n\t\tthis.css = this.resources.\n\t\t\tfilter(function (item){\n\t\t\t\tif (item.type === \"text/css\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Convert split resources into Urls\n\t * @private\n\t */\n\tsplitUrls(){\n\n\t\t// All Assets Urls\n\t\tthis.urls = this.assets.\n\t\t\tmap(function(item) {\n\t\t\t\treturn item.href;\n\t\t\t}.bind(this));\n\n\t\t// Css Urls\n\t\tthis.cssUrls = this.css.map(function(item) {\n\t\t\treturn item.href;\n\t\t});\n\n\t}\n\n\t/**\n\t * Create a url to a resource\n\t * @param {string} url\n\t * @return {Promise<string>} Promise resolves with url string\n\t */\n\tcreateUrl (url) {\n\t\tvar parsedUrl = new Url(url);\n\t\tvar mimeType = mime.lookup(parsedUrl.filename);\n\n\t\tif (this.settings.archive) {\n\t\t\treturn this.settings.archive.createUrl(url, {\"base64\": (this.settings.replacements === \"base64\")});\n\t\t} else {\n\t\t\tif (this.settings.replacements === \"base64\") {\n\t\t\t\treturn this.settings.request(url, 'blob')\n\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\treturn blob2base64(blob);\n\t\t\t\t\t})\n\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\treturn createBase64Url(blob, mimeType);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn this.settings.request(url, 'blob').then((blob) => {\n\t\t\t\t\treturn createBlobUrl(blob, mimeType);\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Create blob urls for all the assets\n\t * @return {Promise}         returns replacement urls\n\t */\n\treplacements(){\n\t\tif (this.settings.replacements === \"none\") {\n\t\t\treturn new Promise(function(resolve) {\n\t\t\t\tresolve(this.urls);\n\t\t\t}.bind(this));\n\t\t}\n\n\t\tvar replacements = this.urls.map( (url) => {\n\t\t\t\tvar absolute = this.settings.resolver(url);\n\n\t\t\t\treturn this.createUrl(absolute).\n\t\t\t\t\tcatch((err) => {\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t});\n\t\t\t});\n\n\t\treturn Promise.all(replacements)\n\t\t\t.then( (replacementUrls) => {\n\t\t\t\tthis.replacementUrls = replacementUrls.filter((url) => {\n\t\t\t\t\treturn (typeof(url) === \"string\");\n\t\t\t\t});\n\t\t\t\treturn replacementUrls;\n\t\t\t});\n\t}\n\n\t/**\n\t * Replace URLs in CSS resources\n\t * @private\n\t * @param  {Archive} [archive]\n\t * @param  {method} [resolver]\n\t * @return {Promise}\n\t */\n\treplaceCss(archive, resolver){\n\t\tvar replaced = [];\n\t\tarchive = archive || this.settings.archive;\n\t\tresolver = resolver || this.settings.resolver;\n\t\tthis.cssUrls.forEach(function(href) {\n\t\t\tvar replacement = this.createCssFile(href, archive, resolver)\n\t\t\t\t.then(function (replacementUrl) {\n\t\t\t\t\t// switch the url in the replacementUrls\n\t\t\t\t\tvar indexInUrls = this.urls.indexOf(href);\n\t\t\t\t\tif (indexInUrls > -1) {\n\t\t\t\t\t\tthis.replacementUrls[indexInUrls] = replacementUrl;\n\t\t\t\t\t}\n\t\t\t\t}.bind(this))\n\n\n\t\t\treplaced.push(replacement);\n\t\t}.bind(this));\n\t\treturn Promise.all(replaced);\n\t}\n\n\t/**\n\t * Create a new CSS file with the replaced URLs\n\t * @private\n\t * @param  {string} href the original css file\n\t * @return {Promise}  returns a BlobUrl to the new CSS file or a data url\n\t */\n\tcreateCssFile(href){\n\t\tvar newUrl;\n\n\t\tif (path.isAbsolute(href)) {\n\t\t\treturn new Promise(function(resolve){\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\n\t\tvar absolute = this.settings.resolver(href);\n\n\t\t// Get the text of the css file from the archive\n\t\tvar textResponse;\n\n\t\tif (this.settings.archive) {\n\t\t\ttextResponse = this.settings.archive.getText(absolute);\n\t\t} else {\n\t\t\ttextResponse = this.settings.request(absolute, \"text\");\n\t\t}\n\n\t\t// Get asset links relative to css file\n\t\tvar relUrls = this.urls.map( (assetHref) => {\n\t\t\tvar resolved = this.settings.resolver(assetHref);\n\t\t\tvar relative = new Path(absolute).relative(resolved);\n\n\t\t\treturn relative;\n\t\t});\n\n\t\tif (!textResponse) {\n\t\t\t// file not found, don't replace\n\t\t\treturn new Promise(function(resolve){\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\n\t\treturn textResponse.then( (text) => {\n\t\t\t// Replacements in the css text\n\t\t\ttext = substitute(text, relUrls, this.replacementUrls);\n\n\t\t\t// Get the new url\n\t\t\tif (this.settings.replacements === \"base64\") {\n\t\t\t\tnewUrl = createBase64Url(text, \"text/css\");\n\t\t\t} else {\n\t\t\t\tnewUrl = createBlobUrl(text, \"text/css\");\n\t\t\t}\n\n\t\t\treturn newUrl;\n\t\t}, (err) => {\n\t\t\t// handle response errors\n\t\t\treturn new Promise(function(resolve){\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\n\t}\n\n\t/**\n\t * Resolve all resources URLs relative to an absolute URL\n\t * @param  {string} absolute to be resolved to\n\t * @param  {resolver} [resolver]\n\t * @return {string[]} array with relative Urls\n\t */\n\trelativeTo(absolute, resolver){\n\t\tresolver = resolver || this.settings.resolver;\n\n\t\t// Get Urls relative to current sections\n\t\treturn this.urls.\n\t\t\tmap(function(href) {\n\t\t\t\tvar resolved = resolver(href);\n\t\t\t\tvar relative = new Path(absolute).relative(resolved);\n\t\t\t\treturn relative;\n\t\t\t}.bind(this));\n\t}\n\n\t/**\n\t * Get a URL for a resource\n\t * @param  {string} path\n\t * @return {string} url\n\t */\n\tget(path) {\n\t\tvar indexInUrls = this.urls.indexOf(path);\n\t\tif (indexInUrls === -1) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.replacementUrls.length) {\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tresolve(this.replacementUrls[indexInUrls]);\n\t\t\t}.bind(this));\n\t\t} else {\n\t\t\treturn this.createUrl(path);\n\t\t}\n\t}\n\n\t/**\n\t * Substitute urls in content, with replacements,\n\t * relative to a url if provided\n\t * @param  {string} content\n\t * @param  {string} [url]   url to resolve to\n\t * @return {string}         content with urls substituted\n\t */\n\tsubstitute(content, url) {\n\t\tvar relUrls;\n\t\tif (url) {\n\t\t\trelUrls = this.relativeTo(url);\n\t\t} else {\n\t\t\trelUrls = this.urls;\n\t\t}\n\t\treturn substitute(content, relUrls, this.replacementUrls);\n\t}\n\n\tdestroy() {\n\t\tthis.settings = undefined;\n\t\tthis.manifest = undefined;\n\t\tthis.resources = undefined;\n\t\tthis.replacementUrls = undefined;\n\t\tthis.html = undefined;\n\t\tthis.assets = undefined;\n\t\tthis.css = undefined;\n\n\t\tthis.urls = undefined;\n\t\tthis.cssUrls = undefined;\n\t}\n}\n\nexport default Resources;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}