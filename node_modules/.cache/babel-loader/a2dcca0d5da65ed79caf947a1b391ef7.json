{"ast":null,"code":"import Url from \"./utils/url\";\n\n/**\n * Themes to apply to displayed content\n * @class\n * @param {Rendition} rendition\n */\nclass Themes {\n  constructor(rendition) {\n    this.rendition = rendition;\n    this._themes = {\n      \"default\": {\n        \"rules\": {},\n        \"url\": \"\",\n        \"serialized\": \"\"\n      }\n    };\n    this._overrides = {};\n    this._current = \"default\";\n    this._injected = [];\n    this.rendition.hooks.content.register(this.inject.bind(this));\n    this.rendition.hooks.content.register(this.overrides.bind(this));\n  }\n\n  /**\n   * Add themes to be used by a rendition\n   * @param {object | Array<object> | string}\n   * @example themes.register(\"light\", \"http://example.com/light.css\")\n   * @example themes.register(\"light\", { \"body\": { \"color\": \"purple\"}})\n   * @example themes.register({ \"light\" : {...}, \"dark\" : {...}})\n   */\n  register() {\n    if (arguments.length === 0) {\n      return;\n    }\n    if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n      return this.registerThemes(arguments[0]);\n    }\n    if (arguments.length === 1 && typeof arguments[0] === \"string\") {\n      return this.default(arguments[0]);\n    }\n    if (arguments.length === 2 && typeof arguments[1] === \"string\") {\n      return this.registerUrl(arguments[0], arguments[1]);\n    }\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\n      return this.registerRules(arguments[0], arguments[1]);\n    }\n  }\n\n  /**\n   * Add a default theme to be used by a rendition\n   * @param {object | string} theme\n   * @example themes.register(\"http://example.com/default.css\")\n   * @example themes.register({ \"body\": { \"color\": \"purple\"}})\n   */\n  default(theme) {\n    if (!theme) {\n      return;\n    }\n    if (typeof theme === \"string\") {\n      return this.registerUrl(\"default\", theme);\n    }\n    if (typeof theme === \"object\") {\n      return this.registerRules(\"default\", theme);\n    }\n  }\n\n  /**\n   * Register themes object\n   * @param {object} themes\n   */\n  registerThemes(themes) {\n    for (var theme in themes) {\n      if (themes.hasOwnProperty(theme)) {\n        if (typeof themes[theme] === \"string\") {\n          this.registerUrl(theme, themes[theme]);\n        } else {\n          this.registerRules(theme, themes[theme]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Register a theme by passing its css as string\n   * @param {string} name \n   * @param {string} css \n   */\n  registerCss(name, css) {\n    this._themes[name] = {\n      \"serialized\": css\n    };\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n\n  /**\n   * Register a url\n   * @param {string} name\n   * @param {string} input\n   */\n  registerUrl(name, input) {\n    var url = new Url(input);\n    this._themes[name] = {\n      \"url\": url.toString()\n    };\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n\n  /**\n   * Register rule\n   * @param {string} name\n   * @param {object} rules\n   */\n  registerRules(name, rules) {\n    this._themes[name] = {\n      \"rules\": rules\n    };\n    // TODO: serialize css rules\n    if (this._injected[name] || name == 'default') {\n      this.update(name);\n    }\n  }\n\n  /**\n   * Select a theme\n   * @param {string} name\n   */\n  select(name) {\n    var prev = this._current;\n    var contents;\n    this._current = name;\n    this.update(name);\n    contents = this.rendition.getContents();\n    contents.forEach(content => {\n      content.removeClass(prev);\n      content.addClass(name);\n    });\n  }\n\n  /**\n   * Update a theme\n   * @param {string} name\n   */\n  update(name) {\n    var contents = this.rendition.getContents();\n    contents.forEach(content => {\n      this.add(name, content);\n    });\n  }\n\n  /**\n   * Inject all themes into contents\n   * @param {Contents} contents\n   */\n  inject(contents) {\n    var links = [];\n    var themes = this._themes;\n    var theme;\n    for (var name in themes) {\n      if (themes.hasOwnProperty(name) && (name === this._current || name === \"default\")) {\n        theme = themes[name];\n        if (theme.rules && Object.keys(theme.rules).length > 0 || theme.url && links.indexOf(theme.url) === -1) {\n          this.add(name, contents);\n        }\n        this._injected.push(name);\n      }\n    }\n    if (this._current != \"default\") {\n      contents.addClass(this._current);\n    }\n  }\n\n  /**\n   * Add Theme to contents\n   * @param {string} name\n   * @param {Contents} contents\n   */\n  add(name, contents) {\n    var theme = this._themes[name];\n    if (!theme || !contents) {\n      return;\n    }\n    if (theme.url) {\n      contents.addStylesheet(theme.url);\n    } else if (theme.serialized) {\n      contents.addStylesheetCss(theme.serialized, name);\n      theme.injected = true;\n    } else if (theme.rules) {\n      contents.addStylesheetRules(theme.rules, name);\n      theme.injected = true;\n    }\n  }\n\n  /**\n   * Add override\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} priority\n   */\n  override(name, value, priority) {\n    var contents = this.rendition.getContents();\n    this._overrides[name] = {\n      value: value,\n      priority: priority === true\n    };\n    contents.forEach(content => {\n      content.css(name, this._overrides[name].value, this._overrides[name].priority);\n    });\n  }\n  removeOverride(name) {\n    var contents = this.rendition.getContents();\n    delete this._overrides[name];\n    contents.forEach(content => {\n      content.css(name);\n    });\n  }\n\n  /**\n   * Add all overrides\n   * @param {Content} content\n   */\n  overrides(contents) {\n    var overrides = this._overrides;\n    for (var rule in overrides) {\n      if (overrides.hasOwnProperty(rule)) {\n        contents.css(rule, overrides[rule].value, overrides[rule].priority);\n      }\n    }\n  }\n\n  /**\n   * Adjust the font size of a rendition\n   * @param {number} size\n   */\n  fontSize(size) {\n    this.override(\"font-size\", size);\n  }\n\n  /**\n   * Adjust the font-family of a rendition\n   * @param {string} f\n   */\n  font(f) {\n    this.override(\"font-family\", f, true);\n  }\n  destroy() {\n    this.rendition = undefined;\n    this._themes = undefined;\n    this._overrides = undefined;\n    this._current = undefined;\n    this._injected = undefined;\n  }\n}\nexport default Themes;","map":{"version":3,"names":["Url","Themes","constructor","rendition","_themes","_overrides","_current","_injected","hooks","content","register","inject","bind","overrides","arguments","length","registerThemes","default","registerUrl","registerRules","theme","themes","hasOwnProperty","registerCss","name","css","update","input","url","toString","rules","select","prev","contents","getContents","forEach","removeClass","addClass","add","links","Object","keys","indexOf","push","addStylesheet","serialized","addStylesheetCss","injected","addStylesheetRules","override","value","priority","removeOverride","rule","fontSize","size","font","f","destroy","undefined"],"sources":["/home/parallels/Downloads/react-epub-viewer-demo/node_modules/epubjs/src/themes.js"],"sourcesContent":["import Url from \"./utils/url\";\n\n/**\n * Themes to apply to displayed content\n * @class\n * @param {Rendition} rendition\n */\nclass Themes {\n\tconstructor(rendition) {\n\t\tthis.rendition = rendition;\n\t\tthis._themes = {\n\t\t\t\"default\" : {\n\t\t\t\t\"rules\" : {},\n\t\t\t\t\"url\" : \"\",\n\t\t\t\t\"serialized\" : \"\"\n\t\t\t}\n\t\t};\n\t\tthis._overrides = {};\n\t\tthis._current = \"default\";\n\t\tthis._injected = [];\n\t\tthis.rendition.hooks.content.register(this.inject.bind(this));\n\t\tthis.rendition.hooks.content.register(this.overrides.bind(this));\n\n\t}\n\n\t/**\n\t * Add themes to be used by a rendition\n\t * @param {object | Array<object> | string}\n\t * @example themes.register(\"light\", \"http://example.com/light.css\")\n\t * @example themes.register(\"light\", { \"body\": { \"color\": \"purple\"}})\n\t * @example themes.register({ \"light\" : {...}, \"dark\" : {...}})\n\t */\n\tregister () {\n\t\tif (arguments.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (arguments.length === 1 && typeof(arguments[0]) === \"object\") {\n\t\t\treturn this.registerThemes(arguments[0]);\n\t\t}\n\t\tif (arguments.length === 1 && typeof(arguments[0]) === \"string\") {\n\t\t\treturn this.default(arguments[0]);\n\t\t}\n\t\tif (arguments.length === 2 && typeof(arguments[1]) === \"string\") {\n\t\t\treturn this.registerUrl(arguments[0], arguments[1]);\n\t\t}\n\t\tif (arguments.length === 2 && typeof(arguments[1]) === \"object\") {\n\t\t\treturn this.registerRules(arguments[0], arguments[1]);\n\t\t}\n\t}\n\n\t/**\n\t * Add a default theme to be used by a rendition\n\t * @param {object | string} theme\n\t * @example themes.register(\"http://example.com/default.css\")\n\t * @example themes.register({ \"body\": { \"color\": \"purple\"}})\n\t */\n\tdefault (theme) {\n\t\tif (!theme) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof(theme) === \"string\") {\n\t\t\treturn this.registerUrl(\"default\", theme);\n\t\t}\n\t\tif (typeof(theme) === \"object\") {\n\t\t\treturn this.registerRules(\"default\", theme);\n\t\t}\n\t}\n\n\t/**\n\t * Register themes object\n\t * @param {object} themes\n\t */\n\tregisterThemes (themes) {\n\t\tfor (var theme in themes) {\n\t\t\tif (themes.hasOwnProperty(theme)) {\n\t\t\t\tif (typeof(themes[theme]) === \"string\") {\n\t\t\t\t\tthis.registerUrl(theme, themes[theme]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.registerRules(theme, themes[theme]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Register a theme by passing its css as string\n\t * @param {string} name \n\t * @param {string} css \n\t */\n\tregisterCss (name, css) {\n\t\tthis._themes[name] = { \"serialized\" : css };\n\t\tif (this._injected[name] || name == 'default') {\n\t\t\tthis.update(name);\n\t\t}\n\t}\n\n\t/**\n\t * Register a url\n\t * @param {string} name\n\t * @param {string} input\n\t */\n\tregisterUrl (name, input) {\n\t\tvar url = new Url(input);\n\t\tthis._themes[name] = { \"url\": url.toString() };\n\t\tif (this._injected[name] || name == 'default') {\n\t\t\tthis.update(name);\n\t\t}\n\t}\n\n\t/**\n\t * Register rule\n\t * @param {string} name\n\t * @param {object} rules\n\t */\n\tregisterRules (name, rules) {\n\t\tthis._themes[name] = { \"rules\": rules };\n\t\t// TODO: serialize css rules\n\t\tif (this._injected[name] || name == 'default') {\n\t\t\tthis.update(name);\n\t\t}\n\t}\n\n\t/**\n\t * Select a theme\n\t * @param {string} name\n\t */\n\tselect (name) {\n\t\tvar prev = this._current;\n\t\tvar contents;\n\n\t\tthis._current = name;\n\t\tthis.update(name);\n\n\t\tcontents = this.rendition.getContents();\n\t\tcontents.forEach( (content) => {\n\t\t\tcontent.removeClass(prev);\n\t\t\tcontent.addClass(name);\n\t\t});\n\t}\n\n\t/**\n\t * Update a theme\n\t * @param {string} name\n\t */\n\tupdate (name) {\n\t\tvar contents = this.rendition.getContents();\n\t\tcontents.forEach( (content) => {\n\t\t\tthis.add(name, content);\n\t\t});\n\t}\n\n\t/**\n\t * Inject all themes into contents\n\t * @param {Contents} contents\n\t */\n\tinject (contents) {\n\t\tvar links = [];\n\t\tvar themes = this._themes;\n\t\tvar theme;\n\n\t\tfor (var name in themes) {\n\t\t\tif (themes.hasOwnProperty(name) && (name === this._current || name === \"default\")) {\n\t\t\t\ttheme = themes[name];\n\t\t\t\tif((theme.rules && Object.keys(theme.rules).length > 0) || (theme.url && links.indexOf(theme.url) === -1)) {\n\t\t\t\t\tthis.add(name, contents);\n\t\t\t\t}\n\t\t\t\tthis._injected.push(name);\n\t\t\t}\n\t\t}\n\n\t\tif(this._current != \"default\") {\n\t\t\tcontents.addClass(this._current);\n\t\t}\n\t}\n\n\t/**\n\t * Add Theme to contents\n\t * @param {string} name\n\t * @param {Contents} contents\n\t */\n\tadd (name, contents) {\n\t\tvar theme = this._themes[name];\n\n\t\tif (!theme || !contents) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (theme.url) {\n\t\t\tcontents.addStylesheet(theme.url);\n\t\t} else if (theme.serialized) {\n\t\t\tcontents.addStylesheetCss(theme.serialized, name);\n\t\t\ttheme.injected = true;\n\t\t} else if (theme.rules) {\n\t\t\tcontents.addStylesheetRules(theme.rules, name);\n\t\t\ttheme.injected = true;\n\t\t}\n\t}\n\n\t/**\n\t * Add override\n\t * @param {string} name\n\t * @param {string} value\n\t * @param {boolean} priority\n\t */\n\toverride (name, value, priority) {\n\t\tvar contents = this.rendition.getContents();\n\n\t\tthis._overrides[name] = {\n\t\t\tvalue: value,\n\t\t\tpriority: priority === true\n\t\t};\n\n\t\tcontents.forEach( (content) => {\n\t\t\tcontent.css(name, this._overrides[name].value, this._overrides[name].priority);\n\t\t});\n\t}\n\n\tremoveOverride (name) {\n\t\tvar contents = this.rendition.getContents();\n\n\t\tdelete this._overrides[name];\n\n\t\tcontents.forEach( (content) => {\n\t\t\tcontent.css(name);\n\t\t});\n\t}\n\n\t/**\n\t * Add all overrides\n\t * @param {Content} content\n\t */\n\toverrides (contents) {\n\t\tvar overrides = this._overrides;\n\n\t\tfor (var rule in overrides) {\n\t\t\tif (overrides.hasOwnProperty(rule)) {\n\t\t\t\tcontents.css(rule, overrides[rule].value, overrides[rule].priority);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adjust the font size of a rendition\n\t * @param {number} size\n\t */\n\tfontSize (size) {\n\t\tthis.override(\"font-size\", size);\n\t}\n\n\t/**\n\t * Adjust the font-family of a rendition\n\t * @param {string} f\n\t */\n\tfont (f) {\n\t\tthis.override(\"font-family\", f, true);\n\t}\n\n\tdestroy() {\n\t\tthis.rendition = undefined;\n\t\tthis._themes = undefined;\n\t\tthis._overrides = undefined;\n\t\tthis._current = undefined;\n\t\tthis._injected = undefined;\n\t}\n\n}\n\nexport default Themes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}