{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * Epub Reader 메뉴를 컨트롤 하는 hook\n * - control의 display를 Menu 생성/제거 플래그로 이용합니다.\n * - control의 show를 Animaton 플래그로 이용합니다.\n * - Menu 이외의 영역 클릭시 Close Event 발동\n *\n * @param ref DOM을 가지고 있는 useRef\n * @param delay 애니메이션 딜레이 시간(ms)\n * \n * @example\n * const Viewer = () => {\n *   const menuDelay = 300;\n * \n *   const ref = useRef<HTMLDivElement | null>(null);\n *   const [control, onToggle] = usemenu(ref, menuDelay);\n * \n *   return (<>\n *     <MenuOpenBtn onClick={onToggle} />\n *     <Menu control={control} onToggle={onToggle} ref={ref} />\n *   </>);\n * }\n * \n * const Menu = ({ control, onToggle }, ref) => {\n *   return (<>\n *     {control.display && <MenuWrapper show={control.show} \n *                                      delay={menuDelay}\n *                                      ref={ref}>\n *       <CloseBtn onClick={onToggle} />\n *     </MenuWrapper>}\n *   </>);\n * }\n * \n * const MenuWrapper = styled.div<{show: boolean; delay: boolean;}>`\n *   transform: ${({show}) => show\n *     ? \"translateX(0px)\"\n *     : \"translateX(420px)\"\n *   };\n *   transition: ${({delay}) => `${delay}ms ease`};\n * `;\n */\nfunction useMenu(ref, delay) {\n  _s();\n  const [eventSignal, setEventSignal] = useState(true);\n  const [control, setControl] = useState({\n    display: false,\n    open: false\n  });\n\n  /** Menu 토글 */\n  const onToggle = useCallback(() => {\n    let event = null;\n    window.clearTimeout(event);\n    if (!control.display) {\n      setControl({\n        display: true,\n        open: false\n      });\n      event = window.setTimeout(() => setControl({\n        display: true,\n        open: true\n      }), 0);\n    } else {\n      setControl({\n        display: true,\n        open: false\n      });\n      event = window.setTimeout(() => setControl({\n        display: false,\n        open: false\n      }), delay - 50);\n    }\n  }, [control.display, delay]);\n\n  /** \n   * 메뉴 닫기 \n   * - Event path에서 메뉴가 포함되어있지 않으면, 함수를 실행합니다.\n   */\n  const onClose = useCallback(e => {\n    if (!ref || !ref.current) return;\n    if (!e.path.includes(ref.current)) {\n      onToggle();\n    }\n  }, [ref, onToggle]);\n\n  /** \n   * 이벤트 재등록\n   * - '보기설정' 에서 rendition이 재 렌더링 될 때, 이벤트를 재등록하기 위한 함수\n   * - Iframe 생성 시간 대기 [About 250ms]\n   */\n  const emitEvent = useCallback(() => {\n    window.setTimeout(() => setEventSignal(true), 300);\n  }, [setEventSignal]);\n\n  /** \n  * 목차 닫기 이벤트 등록 \n  * - Epub이 iframe으로 등록되므로, iframe에도 Event를 등록시켜줍니다.\n  */\n  useEffect(() => {\n    if (!eventSignal && !control.display) return;\n    const epubIframe = document.querySelector('iframe');\n    if (control.display) {\n      document.addEventListener('click', onClose);\n      if (epubIframe && epubIframe.contentWindow) {\n        epubIframe.contentWindow.document.addEventListener('click', onClose);\n      }\n    } else {\n      document.removeEventListener('click', onClose);\n      if (epubIframe && epubIframe.contentWindow) {\n        epubIframe.contentWindow.document.removeEventListener('click', onClose);\n      }\n    }\n    setEventSignal(false);\n    return () => {\n      document.removeEventListener('click', onClose);\n      if (epubIframe && epubIframe.contentWindow) {\n        epubIframe.contentWindow.document.removeEventListener('click', onClose);\n      }\n    };\n  }, [control.display, onClose, eventSignal]);\n  return [control, onToggle, emitEvent];\n}\n_s(useMenu, \"BJUFhPwIWFiseDsVyxx1SbjTB7c=\");\nexport default useMenu;","map":{"version":3,"names":["useState","useEffect","useCallback","useMenu","ref","delay","eventSignal","setEventSignal","control","setControl","display","open","onToggle","event","window","clearTimeout","setTimeout","onClose","e","current","path","includes","emitEvent","epubIframe","document","querySelector","addEventListener","contentWindow","removeEventListener"],"sources":["/home/parallels/Downloads/react-epub-viewer-demo/src/lib/hooks/useMenu.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n/**\n * Epub Reader 메뉴를 컨트롤 하는 hook\n * - control의 display를 Menu 생성/제거 플래그로 이용합니다.\n * - control의 show를 Animaton 플래그로 이용합니다.\n * - Menu 이외의 영역 클릭시 Close Event 발동\n *\n * @param ref DOM을 가지고 있는 useRef\n * @param delay 애니메이션 딜레이 시간(ms)\n * \n * @example\n * const Viewer = () => {\n *   const menuDelay = 300;\n * \n *   const ref = useRef<HTMLDivElement | null>(null);\n *   const [control, onToggle] = usemenu(ref, menuDelay);\n * \n *   return (<>\n *     <MenuOpenBtn onClick={onToggle} />\n *     <Menu control={control} onToggle={onToggle} ref={ref} />\n *   </>);\n * }\n * \n * const Menu = ({ control, onToggle }, ref) => {\n *   return (<>\n *     {control.display && <MenuWrapper show={control.show} \n *                                      delay={menuDelay}\n *                                      ref={ref}>\n *       <CloseBtn onClick={onToggle} />\n *     </MenuWrapper>}\n *   </>);\n * }\n * \n * const MenuWrapper = styled.div<{show: boolean; delay: boolean;}>`\n *   transform: ${({show}) => show\n *     ? \"translateX(0px)\"\n *     : \"translateX(420px)\"\n *   };\n *   transition: ${({delay}) => `${delay}ms ease`};\n * `;\n */\nfunction useMenu(ref: { current: any }, delay: number) {\n\tconst [eventSignal, setEventSignal] = useState<boolean>(true);\n\tconst [control, setControl] = useState<MenuControl>({\n\t\tdisplay: false,\n\t\topen: false\n\t});\n\t\n\n\t/** Menu 토글 */\n\tconst onToggle = useCallback(() => {\n\t\tlet event: any = null;\n\t\twindow.clearTimeout(event);\n\t\tif (!control.display) {\n\t\t\tsetControl({ display: true, open: false });\n\t\t\tevent = window.setTimeout(() => setControl({ display: true, open: true}), 0);\n\t\t} else {\n\t\t\tsetControl({ display: true, open: false });\n\t\t\tevent = window.setTimeout(() => setControl({ display: false, open: false }), delay - 50);\n\t\t}\n\t}, [control.display, delay]);\n\n\t/** \n\t * 메뉴 닫기 \n\t * - Event path에서 메뉴가 포함되어있지 않으면, 함수를 실행합니다.\n\t */\n  const onClose = useCallback((e: any) => {\n    if (!ref || !ref.current) return;\n    if (!e.path.includes(ref.current)) {\n\t\t\tonToggle();\n    }\n  }, [ref, onToggle]);\n\n\t/** \n\t * 이벤트 재등록\n\t * - '보기설정' 에서 rendition이 재 렌더링 될 때, 이벤트를 재등록하기 위한 함수\n\t * - Iframe 생성 시간 대기 [About 250ms]\n\t */\n\tconst emitEvent = useCallback(() => {\n\t\twindow.setTimeout(() => setEventSignal(true), 300);\n\t}, [setEventSignal]); \n\n\n  /** \n\t * 목차 닫기 이벤트 등록 \n\t * - Epub이 iframe으로 등록되므로, iframe에도 Event를 등록시켜줍니다.\n\t */\n  useEffect(() => {\n\t\tif (!eventSignal && !control.display) return;\n\t\t\n    const epubIframe = document.querySelector('iframe');\n\n\t\tif (control.display) {\n\t\t\tdocument.addEventListener('click', onClose);\n\t\t\tif (epubIframe && epubIframe.contentWindow) {\n\t\t\t\tepubIframe.contentWindow.document.addEventListener('click', onClose);\n\t\t\t}\n\t\t} else {\n\t\t\tdocument.removeEventListener('click', onClose);\n      if (epubIframe && epubIframe.contentWindow) {\n\t\t\t\tepubIframe.contentWindow.document.removeEventListener('click', onClose);\n      }\n\t\t}\n\n\t\tsetEventSignal(false);\n  \n    return () => {\n      document.removeEventListener('click', onClose);\n      if (epubIframe && epubIframe.contentWindow) {\n\t\t\t\tepubIframe.contentWindow.document.removeEventListener('click', onClose);\n      }\n    }\n  }, [control.display, onClose, eventSignal]);\n\n\treturn [control, onToggle, emitEvent] as const;\n}\n\nexport type MenuControl = {\n\tdisplay: boolean;\n\topen: boolean;\n}\n\nexport default useMenu"],"mappings":"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"},"metadata":{},"sourceType":"module"}