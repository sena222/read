{"ast":null,"code":"import { defer, isXml, parse } from \"./utils/core\";\nimport httpRequest from \"./utils/request\";\nimport mime from \"./utils/mime\";\nimport Path from \"./utils/path\";\nimport EventEmitter from \"event-emitter\";\nimport localforage from \"localforage\";\n\n/**\n * Handles saving and requesting files from local storage\n * @class\n * @param {string} name This should be the name of the application for modals\n * @param {function} [requester]\n * @param {function} [resolver]\n */\nclass Store {\n  constructor(name, requester, resolver) {\n    this.urlCache = {};\n    this.storage = undefined;\n    this.name = name;\n    this.requester = requester || httpRequest;\n    this.resolver = resolver;\n    this.online = true;\n    this.checkRequirements();\n    this.addListeners();\n  }\n\n  /**\n   * Checks to see if localForage exists in global namspace,\n   * Requires localForage if it isn't there\n   * @private\n   */\n  checkRequirements() {\n    try {\n      let store;\n      if (typeof localforage === \"undefined\") {\n        store = localforage;\n      }\n      this.storage = store.createInstance({\n        name: this.name\n      });\n    } catch (e) {\n      throw new Error(\"localForage lib not loaded\");\n    }\n  }\n\n  /**\n   * Add online and offline event listeners\n   * @private\n   */\n  addListeners() {\n    this._status = this.status.bind(this);\n    window.addEventListener('online', this._status);\n    window.addEventListener('offline', this._status);\n  }\n\n  /**\n   * Remove online and offline event listeners\n   * @private\n   */\n  removeListeners() {\n    window.removeEventListener('online', this._status);\n    window.removeEventListener('offline', this._status);\n    this._status = undefined;\n  }\n\n  /**\n   * Update the online / offline status\n   * @private\n   */\n  status(event) {\n    let online = navigator.onLine;\n    this.online = online;\n    if (online) {\n      this.emit(\"online\", this);\n    } else {\n      this.emit(\"offline\", this);\n    }\n  }\n\n  /**\n   * Add all of a book resources to the store\n   * @param  {Resources} resources  book resources\n   * @param  {boolean} [force] force resaving resources\n   * @return {Promise<object>} store objects\n   */\n  add(resources, force) {\n    let mapped = resources.resources.map(item => {\n      let {\n        href\n      } = item;\n      let url = this.resolver(href);\n      let encodedUrl = window.encodeURIComponent(url);\n      return this.storage.getItem(encodedUrl).then(item => {\n        if (!item || force) {\n          return this.requester(url, \"binary\").then(data => {\n            return this.storage.setItem(encodedUrl, data);\n          });\n        } else {\n          return item;\n        }\n      });\n    });\n    return Promise.all(mapped);\n  }\n\n  /**\n   * Put binary data from a url to storage\n   * @param  {string} url  a url to request from storage\n   * @param  {boolean} [withCredentials]\n   * @param  {object} [headers]\n   * @return {Promise<Blob>}\n   */\n  put(url, withCredentials, headers) {\n    let encodedUrl = window.encodeURIComponent(url);\n    return this.storage.getItem(encodedUrl).then(result => {\n      if (!result) {\n        return this.requester(url, \"binary\", withCredentials, headers).then(data => {\n          return this.storage.setItem(encodedUrl, data);\n        });\n      }\n      return result;\n    });\n  }\n\n  /**\n   * Request a url\n   * @param  {string} url  a url to request from storage\n   * @param  {string} [type] specify the type of the returned result\n   * @param  {boolean} [withCredentials]\n   * @param  {object} [headers]\n   * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n   */\n  request(url, type, withCredentials, headers) {\n    if (this.online) {\n      // From network\n      return this.requester(url, type, withCredentials, headers).then(data => {\n        // save to store if not present\n        this.put(url);\n        return data;\n      });\n    } else {\n      // From store\n      return this.retrieve(url, type);\n    }\n  }\n\n  /**\n   * Request a url from storage\n   * @param  {string} url  a url to request from storage\n   * @param  {string} [type] specify the type of the returned result\n   * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n   */\n  retrieve(url, type) {\n    var deferred = new defer();\n    var response;\n    var path = new Path(url);\n\n    // If type isn't set, determine it from the file extension\n    if (!type) {\n      type = path.extension;\n    }\n    if (type == \"blob\") {\n      response = this.getBlob(url);\n    } else {\n      response = this.getText(url);\n    }\n    return response.then(r => {\n      var deferred = new defer();\n      var result;\n      if (r) {\n        result = this.handleResponse(r, type);\n        deferred.resolve(result);\n      } else {\n        deferred.reject({\n          message: \"File not found in storage: \" + url,\n          stack: new Error().stack\n        });\n      }\n      return deferred.promise;\n    });\n  }\n\n  /**\n   * Handle the response from request\n   * @private\n   * @param  {any} response\n   * @param  {string} [type]\n   * @return {any} the parsed result\n   */\n  handleResponse(response, type) {\n    var r;\n    if (type == \"json\") {\n      r = JSON.parse(response);\n    } else if (isXml(type)) {\n      r = parse(response, \"text/xml\");\n    } else if (type == \"xhtml\") {\n      r = parse(response, \"application/xhtml+xml\");\n    } else if (type == \"html\" || type == \"htm\") {\n      r = parse(response, \"text/html\");\n    } else {\n      r = response;\n    }\n    return r;\n  }\n\n  /**\n   * Get a Blob from Storage by Url\n   * @param  {string} url\n   * @param  {string} [mimeType]\n   * @return {Blob}\n   */\n  getBlob(url, mimeType) {\n    let encodedUrl = window.encodeURIComponent(url);\n    return this.storage.getItem(encodedUrl).then(function (uint8array) {\n      if (!uint8array) return;\n      mimeType = mimeType || mime.lookup(url);\n      return new Blob([uint8array], {\n        type: mimeType\n      });\n    });\n  }\n\n  /**\n   * Get Text from Storage by Url\n   * @param  {string} url\n   * @param  {string} [mimeType]\n   * @return {string}\n   */\n  getText(url, mimeType) {\n    let encodedUrl = window.encodeURIComponent(url);\n    mimeType = mimeType || mime.lookup(url);\n    return this.storage.getItem(encodedUrl).then(function (uint8array) {\n      var deferred = new defer();\n      var reader = new FileReader();\n      var blob;\n      if (!uint8array) return;\n      blob = new Blob([uint8array], {\n        type: mimeType\n      });\n      reader.addEventListener(\"loadend\", () => {\n        deferred.resolve(reader.result);\n      });\n      reader.readAsText(blob, mimeType);\n      return deferred.promise;\n    });\n  }\n\n  /**\n   * Get a base64 encoded result from Storage by Url\n   * @param  {string} url\n   * @param  {string} [mimeType]\n   * @return {string} base64 encoded\n   */\n  getBase64(url, mimeType) {\n    let encodedUrl = window.encodeURIComponent(url);\n    mimeType = mimeType || mime.lookup(url);\n    return this.storage.getItem(encodedUrl).then(uint8array => {\n      var deferred = new defer();\n      var reader = new FileReader();\n      var blob;\n      if (!uint8array) return;\n      blob = new Blob([uint8array], {\n        type: mimeType\n      });\n      reader.addEventListener(\"loadend\", () => {\n        deferred.resolve(reader.result);\n      });\n      reader.readAsDataURL(blob, mimeType);\n      return deferred.promise;\n    });\n  }\n\n  /**\n   * Create a Url from a stored item\n   * @param  {string} url\n   * @param  {object} [options.base64] use base64 encoding or blob url\n   * @return {Promise} url promise with Url string\n   */\n  createUrl(url, options) {\n    var deferred = new defer();\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n    var tempUrl;\n    var response;\n    var useBase64 = options && options.base64;\n    if (url in this.urlCache) {\n      deferred.resolve(this.urlCache[url]);\n      return deferred.promise;\n    }\n    if (useBase64) {\n      response = this.getBase64(url);\n      if (response) {\n        response.then(function (tempUrl) {\n          this.urlCache[url] = tempUrl;\n          deferred.resolve(tempUrl);\n        }.bind(this));\n      }\n    } else {\n      response = this.getBlob(url);\n      if (response) {\n        response.then(function (blob) {\n          tempUrl = _URL.createObjectURL(blob);\n          this.urlCache[url] = tempUrl;\n          deferred.resolve(tempUrl);\n        }.bind(this));\n      }\n    }\n    if (!response) {\n      deferred.reject({\n        message: \"File not found in storage: \" + url,\n        stack: new Error().stack\n      });\n    }\n    return deferred.promise;\n  }\n\n  /**\n   * Revoke Temp Url for a archive item\n   * @param  {string} url url of the item in the store\n   */\n  revokeUrl(url) {\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n    var fromCache = this.urlCache[url];\n    if (fromCache) _URL.revokeObjectURL(fromCache);\n  }\n  destroy() {\n    var _URL = window.URL || window.webkitURL || window.mozURL;\n    for (let fromCache in this.urlCache) {\n      _URL.revokeObjectURL(fromCache);\n    }\n    this.urlCache = {};\n    this.removeListeners();\n  }\n}\nEventEmitter(Store.prototype);\nexport default Store;","map":{"version":3,"names":["defer","isXml","parse","httpRequest","mime","Path","EventEmitter","localforage","Store","constructor","name","requester","resolver","urlCache","storage","undefined","online","checkRequirements","addListeners","store","createInstance","e","Error","_status","status","bind","window","addEventListener","removeListeners","removeEventListener","event","navigator","onLine","emit","add","resources","force","mapped","map","item","href","url","encodedUrl","encodeURIComponent","getItem","then","data","setItem","Promise","all","put","withCredentials","headers","result","request","type","retrieve","deferred","response","path","extension","getBlob","getText","r","handleResponse","resolve","reject","message","stack","promise","JSON","mimeType","uint8array","lookup","Blob","reader","FileReader","blob","readAsText","getBase64","readAsDataURL","createUrl","options","_URL","URL","webkitURL","mozURL","tempUrl","useBase64","base64","createObjectURL","revokeUrl","fromCache","revokeObjectURL","destroy","prototype"],"sources":["/home/parallels/Downloads/react-epub-viewer-demo/node_modules/epubjs/src/store.js"],"sourcesContent":["import {defer, isXml, parse} from \"./utils/core\";\nimport httpRequest from \"./utils/request\";\nimport mime from \"./utils/mime\";\nimport Path from \"./utils/path\";\nimport EventEmitter from \"event-emitter\";\nimport localforage from \"localforage\";\n\n/**\n * Handles saving and requesting files from local storage\n * @class\n * @param {string} name This should be the name of the application for modals\n * @param {function} [requester]\n * @param {function} [resolver]\n */\nclass Store {\n\n\tconstructor(name, requester, resolver) {\n\t\tthis.urlCache = {};\n\n\t\tthis.storage = undefined;\n\n\t\tthis.name = name;\n\t\tthis.requester = requester || httpRequest;\n\t\tthis.resolver = resolver;\n\n\t\tthis.online = true;\n\n\t\tthis.checkRequirements();\n\n\t\tthis.addListeners();\n\t}\n\n\t/**\n\t * Checks to see if localForage exists in global namspace,\n\t * Requires localForage if it isn't there\n\t * @private\n\t */\n\tcheckRequirements(){\n\t\ttry {\n\t\t\tlet store;\n\t\t\tif (typeof localforage === \"undefined\") {\n\t\t\t\tstore = localforage;\n\t\t\t}\n\t\t\tthis.storage = store.createInstance({\n\t\t\t\t\tname: this.name\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"localForage lib not loaded\");\n\t\t}\n\t}\n\n\t/**\n\t * Add online and offline event listeners\n\t * @private\n\t */\n\taddListeners() {\n\t\tthis._status = this.status.bind(this);\n\t\twindow.addEventListener('online',  this._status);\n\t  window.addEventListener('offline', this._status);\n\t}\n\n\t/**\n\t * Remove online and offline event listeners\n\t * @private\n\t */\n\tremoveListeners() {\n\t\twindow.removeEventListener('online',  this._status);\n\t  window.removeEventListener('offline', this._status);\n\t\tthis._status = undefined;\n\t}\n\n\t/**\n\t * Update the online / offline status\n\t * @private\n\t */\n\tstatus(event) {\n\t\tlet online = navigator.onLine;\n\t\tthis.online = online;\n\t\tif (online) {\n\t\t\tthis.emit(\"online\", this);\n\t\t} else {\n\t\t\tthis.emit(\"offline\", this);\n\t\t}\n\t}\n\n\t/**\n\t * Add all of a book resources to the store\n\t * @param  {Resources} resources  book resources\n\t * @param  {boolean} [force] force resaving resources\n\t * @return {Promise<object>} store objects\n\t */\n\tadd(resources, force) {\n\t\tlet mapped = resources.resources.map((item) => {\n\t\t\tlet { href } = item;\n\t\t\tlet url = this.resolver(href);\n\t\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\t\treturn this.storage.getItem(encodedUrl).then((item) => {\n\t\t\t\tif (!item || force) {\n\t\t\t\t\treturn this.requester(url, \"binary\")\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\treturn this.storage.setItem(encodedUrl, data);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\t\treturn Promise.all(mapped);\n\t}\n\n\t/**\n\t * Put binary data from a url to storage\n\t * @param  {string} url  a url to request from storage\n\t * @param  {boolean} [withCredentials]\n\t * @param  {object} [headers]\n\t * @return {Promise<Blob>}\n\t */\n\tput(url, withCredentials, headers) {\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then((result) => {\n\t\t\tif (!result) {\n\t\t\t\treturn this.requester(url, \"binary\", withCredentials, headers).then((data) => {\n\t\t\t\t\treturn this.storage.setItem(encodedUrl, data);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t/**\n\t * Request a url\n\t * @param  {string} url  a url to request from storage\n\t * @param  {string} [type] specify the type of the returned result\n\t * @param  {boolean} [withCredentials]\n\t * @param  {object} [headers]\n\t * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n\t */\n\trequest(url, type, withCredentials, headers){\n\t\tif (this.online) {\n\t\t\t// From network\n\t\t\treturn this.requester(url, type, withCredentials, headers).then((data) => {\n\t\t\t\t// save to store if not present\n\t\t\t\tthis.put(url);\n\t\t\t\treturn data;\n\t\t\t})\n\t\t} else {\n\t\t\t// From store\n\t\t\treturn this.retrieve(url, type);\n\t\t}\n\n\t}\n\n\t/**\n\t * Request a url from storage\n\t * @param  {string} url  a url to request from storage\n\t * @param  {string} [type] specify the type of the returned result\n\t * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n\t */\n\tretrieve(url, type) {\n\t\tvar deferred = new defer();\n\t\tvar response;\n\t\tvar path = new Path(url);\n\n\t\t// If type isn't set, determine it from the file extension\n\t\tif(!type) {\n\t\t\ttype = path.extension;\n\t\t}\n\n\t\tif(type == \"blob\"){\n\t\t\tresponse = this.getBlob(url);\n\t\t} else {\n\t\t\tresponse = this.getText(url);\n\t\t}\n\n\n\t\treturn response.then((r) => {\n\t\t\tvar deferred = new defer();\n\t\t\tvar result;\n\t\t\tif (r) {\n\t\t\t\tresult = this.handleResponse(r, type);\n\t\t\t\tdeferred.resolve(result);\n\t\t\t} else {\n\t\t\t\tdeferred.reject({\n\t\t\t\t\tmessage : \"File not found in storage: \" + url,\n\t\t\t\t\tstack : new Error().stack\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn deferred.promise;\n\t\t});\n\t}\n\n\t/**\n\t * Handle the response from request\n\t * @private\n\t * @param  {any} response\n\t * @param  {string} [type]\n\t * @return {any} the parsed result\n\t */\n\thandleResponse(response, type){\n\t\tvar r;\n\n\t\tif(type == \"json\") {\n\t\t\tr = JSON.parse(response);\n\t\t}\n\t\telse\n\t\tif(isXml(type)) {\n\t\t\tr = parse(response, \"text/xml\");\n\t\t}\n\t\telse\n\t\tif(type == \"xhtml\") {\n\t\t\tr = parse(response, \"application/xhtml+xml\");\n\t\t}\n\t\telse\n\t\tif(type == \"html\" || type == \"htm\") {\n\t\t\tr = parse(response, \"text/html\");\n\t\t } else {\n\t\t\t r = response;\n\t\t }\n\n\t\treturn r;\n\t}\n\n\t/**\n\t * Get a Blob from Storage by Url\n\t * @param  {string} url\n\t * @param  {string} [mimeType]\n\t * @return {Blob}\n\t */\n\tgetBlob(url, mimeType){\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then(function(uint8array) {\n\t\t\tif(!uint8array) return;\n\n\t\t\tmimeType = mimeType || mime.lookup(url);\n\n\t\t\treturn new Blob([uint8array], {type : mimeType});\n\t\t});\n\n\t}\n\n\t/**\n\t * Get Text from Storage by Url\n\t * @param  {string} url\n\t * @param  {string} [mimeType]\n\t * @return {string}\n\t */\n\tgetText(url, mimeType){\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\tmimeType = mimeType || mime.lookup(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then(function(uint8array) {\n\t\t\tvar deferred = new defer();\n\t\t\tvar reader = new FileReader();\n\t\t\tvar blob;\n\n\t\t\tif(!uint8array) return;\n\n\t\t\tblob = new Blob([uint8array], {type : mimeType});\n\n\t\t\treader.addEventListener(\"loadend\", () => {\n\t\t\t\tdeferred.resolve(reader.result);\n\t\t\t});\n\n\t\t\treader.readAsText(blob, mimeType);\n\n\t\t\treturn deferred.promise;\n\t\t});\n\t}\n\n\t/**\n\t * Get a base64 encoded result from Storage by Url\n\t * @param  {string} url\n\t * @param  {string} [mimeType]\n\t * @return {string} base64 encoded\n\t */\n\tgetBase64(url, mimeType){\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\tmimeType = mimeType || mime.lookup(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then((uint8array) => {\n\t\t\tvar deferred = new defer();\n\t\t\tvar reader = new FileReader();\n\t\t\tvar blob;\n\n\t\t\tif(!uint8array) return;\n\n\t\t\tblob = new Blob([uint8array], {type : mimeType});\n\n\t\t\treader.addEventListener(\"loadend\", () => {\n\t\t\t\tdeferred.resolve(reader.result);\n\t\t\t});\n\t\t\treader.readAsDataURL(blob, mimeType);\n\n\t\t\treturn deferred.promise;\n\t\t});\n\t}\n\n\t/**\n\t * Create a Url from a stored item\n\t * @param  {string} url\n\t * @param  {object} [options.base64] use base64 encoding or blob url\n\t * @return {Promise} url promise with Url string\n\t */\n\tcreateUrl(url, options){\n\t\tvar deferred = new defer();\n\t\tvar _URL = window.URL || window.webkitURL || window.mozURL;\n\t\tvar tempUrl;\n\t\tvar response;\n\t\tvar useBase64 = options && options.base64;\n\n\t\tif(url in this.urlCache) {\n\t\t\tdeferred.resolve(this.urlCache[url]);\n\t\t\treturn deferred.promise;\n\t\t}\n\n\t\tif (useBase64) {\n\t\t\tresponse = this.getBase64(url);\n\n\t\t\tif (response) {\n\t\t\t\tresponse.then(function(tempUrl) {\n\n\t\t\t\t\tthis.urlCache[url] = tempUrl;\n\t\t\t\t\tdeferred.resolve(tempUrl);\n\n\t\t\t\t}.bind(this));\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tresponse = this.getBlob(url);\n\n\t\t\tif (response) {\n\t\t\t\tresponse.then(function(blob) {\n\n\t\t\t\t\ttempUrl = _URL.createObjectURL(blob);\n\t\t\t\t\tthis.urlCache[url] = tempUrl;\n\t\t\t\t\tdeferred.resolve(tempUrl);\n\n\t\t\t\t}.bind(this));\n\n\t\t\t}\n\t\t}\n\n\n\t\tif (!response) {\n\t\t\tdeferred.reject({\n\t\t\t\tmessage : \"File not found in storage: \" + url,\n\t\t\t\tstack : new Error().stack\n\t\t\t});\n\t\t}\n\n\t\treturn deferred.promise;\n\t}\n\n\t/**\n\t * Revoke Temp Url for a archive item\n\t * @param  {string} url url of the item in the store\n\t */\n\trevokeUrl(url){\n\t\tvar _URL = window.URL || window.webkitURL || window.mozURL;\n\t\tvar fromCache = this.urlCache[url];\n\t\tif(fromCache) _URL.revokeObjectURL(fromCache);\n\t}\n\n\tdestroy() {\n\t\tvar _URL = window.URL || window.webkitURL || window.mozURL;\n\t\tfor (let fromCache in this.urlCache) {\n\t\t\t_URL.revokeObjectURL(fromCache);\n\t\t}\n\t\tthis.urlCache = {};\n\t\tthis.removeListeners();\n\t}\n}\n\nEventEmitter(Store.prototype);\n\nexport default Store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}