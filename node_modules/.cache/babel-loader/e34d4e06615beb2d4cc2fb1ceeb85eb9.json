{"ast":null,"code":"import _classCallCheck from \"/home/parallels/Downloads/read/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/parallels/Downloads/read/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport EventEmitter from \"event-emitter\";\nimport EpubCFI from \"./epubcfi\";\nimport { EVENTS } from \"./utils/constants\";\n\n/**\n\t* Handles managing adding & removing Annotations\n\t* @param {Rendition} rendition\n\t* @class\n\t*/\nvar Annotations = /*#__PURE__*/function () {\n  function Annotations(rendition) {\n    _classCallCheck(this, Annotations);\n    this.rendition = rendition;\n    this.highlights = [];\n    this.underlines = [];\n    this.marks = [];\n    this._annotations = {};\n    this._annotationsBySectionIndex = {};\n    this.rendition.hooks.render.register(this.inject.bind(this));\n    this.rendition.hooks.unloaded.register(this.clear.bind(this));\n  }\n\n  /**\n   * Add an annotation to store\n   * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n   * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n   * @param {object} data Data to assign to annotation\n   * @param {function} [cb] Callback after annotation is added\n   * @param {string} className CSS class to assign to annotation\n   * @param {object} styles CSS styles to assign to annotation\n   * @returns {Annotation} annotation\n   */\n  _createClass(Annotations, [{\n    key: \"add\",\n    value: function add(type, cfiRange, data, cb, className, styles) {\n      var hash = encodeURI(cfiRange + type);\n      var cfi = new EpubCFI(cfiRange);\n      var sectionIndex = cfi.spinePos;\n      var annotation = new Annotation({\n        type: type,\n        cfiRange: cfiRange,\n        data: data,\n        sectionIndex: sectionIndex,\n        cb: cb,\n        className: className,\n        styles: styles\n      });\n      this._annotations[hash] = annotation;\n      if (sectionIndex in this._annotationsBySectionIndex) {\n        this._annotationsBySectionIndex[sectionIndex].push(hash);\n      } else {\n        this._annotationsBySectionIndex[sectionIndex] = [hash];\n      }\n      var views = this.rendition.views();\n      views.forEach(function (view) {\n        if (annotation.sectionIndex === view.index) {\n          annotation.attach(view);\n        }\n      });\n      return annotation;\n    }\n\n    /**\n     * Remove an annotation from store\n     * @param {EpubCFI} cfiRange EpubCFI range the annotation is attached to\n     * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(cfiRange, type) {\n      var _this = this;\n      var hash = encodeURI(cfiRange + type);\n      if (hash in this._annotations) {\n        var annotation = this._annotations[hash];\n        if (type && annotation.type !== type) {\n          return;\n        }\n        var views = this.rendition.views();\n        views.forEach(function (view) {\n          _this._removeFromAnnotationBySectionIndex(annotation.sectionIndex, hash);\n          if (annotation.sectionIndex === view.index) {\n            annotation.detach(view);\n          }\n        });\n        delete this._annotations[hash];\n      }\n    }\n\n    /**\n     * Remove an annotations by Section Index\n     * @private\n     */\n  }, {\n    key: \"_removeFromAnnotationBySectionIndex\",\n    value: function _removeFromAnnotationBySectionIndex(sectionIndex, hash) {\n      this._annotationsBySectionIndex[sectionIndex] = this._annotationsAt(sectionIndex).filter(function (h) {\n        return h !== hash;\n      });\n    }\n\n    /**\n     * Get annotations by Section Index\n     * @private\n     */\n  }, {\n    key: \"_annotationsAt\",\n    value: function _annotationsAt(index) {\n      return this._annotationsBySectionIndex[index];\n    }\n\n    /**\n     * Add a highlight to the store\n     * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n     * @param {object} data Data to assign to annotation\n     * @param {function} cb Callback after annotation is clicked\n     * @param {string} className CSS class to assign to annotation\n     * @param {object} styles CSS styles to assign to annotation\n     */\n  }, {\n    key: \"highlight\",\n    value: function highlight(cfiRange, data, cb, className, styles) {\n      return this.add(\"highlight\", cfiRange, data, cb, className, styles);\n    }\n\n    /**\n     * Add a underline to the store\n     * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n     * @param {object} data Data to assign to annotation\n     * @param {function} cb Callback after annotation is clicked\n     * @param {string} className CSS class to assign to annotation\n     * @param {object} styles CSS styles to assign to annotation\n     */\n  }, {\n    key: \"underline\",\n    value: function underline(cfiRange, data, cb, className, styles) {\n      return this.add(\"underline\", cfiRange, data, cb, className, styles);\n    }\n\n    /**\n     * Add a mark to the store\n     * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n     * @param {object} data Data to assign to annotation\n     * @param {function} cb Callback after annotation is clicked\n     */\n  }, {\n    key: \"mark\",\n    value: function mark(cfiRange, data, cb) {\n      return this.add(\"mark\", cfiRange, data, cb);\n    }\n\n    /**\n     * iterate over annotations in the store\n     */\n  }, {\n    key: \"each\",\n    value: function each() {\n      return this._annotations.forEach.apply(this._annotations, arguments);\n    }\n\n    /**\n     * Hook for injecting annotation into a view\n     * @param {View} view\n     * @private\n     */\n  }, {\n    key: \"inject\",\n    value: function inject(view) {\n      var _this2 = this;\n      var sectionIndex = view.index;\n      if (sectionIndex in this._annotationsBySectionIndex) {\n        var annotations = this._annotationsBySectionIndex[sectionIndex];\n        annotations.forEach(function (hash) {\n          var annotation = _this2._annotations[hash];\n          annotation.attach(view);\n        });\n      }\n    }\n\n    /**\n     * Hook for removing annotation from a view\n     * @param {View} view\n     * @private\n     */\n  }, {\n    key: \"clear\",\n    value: function clear(view) {\n      var _this3 = this;\n      var sectionIndex = view.index;\n      if (sectionIndex in this._annotationsBySectionIndex) {\n        var annotations = this._annotationsBySectionIndex[sectionIndex];\n        annotations.forEach(function (hash) {\n          var annotation = _this3._annotations[hash];\n          annotation.detach(view);\n        });\n      }\n    }\n\n    /**\n     * [Not Implemented] Show annotations\n     * @TODO: needs implementation in View\n     */\n  }, {\n    key: \"show\",\n    value: function show() {}\n\n    /**\n     * [Not Implemented] Hide annotations\n     * @TODO: needs implementation in View\n     */\n  }, {\n    key: \"hide\",\n    value: function hide() {}\n  }]);\n  return Annotations;\n}();\n/**\n * Annotation object\n * @class\n * @param {object} options\n * @param {string} options.type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n * @param {EpubCFI} options.cfiRange EpubCFI range to attach annotation to\n * @param {object} options.data Data to assign to annotation\n * @param {int} options.sectionIndex Index in the Spine of the Section annotation belongs to\n * @param {function} [options.cb] Callback after annotation is clicked\n * @param {string} className CSS class to assign to annotation\n * @param {object} styles CSS styles to assign to annotation\n * @returns {Annotation} annotation\n */\nvar Annotation = /*#__PURE__*/function () {\n  function Annotation(_ref) {\n    var type = _ref.type,\n      cfiRange = _ref.cfiRange,\n      data = _ref.data,\n      sectionIndex = _ref.sectionIndex,\n      cb = _ref.cb,\n      className = _ref.className,\n      styles = _ref.styles;\n    _classCallCheck(this, Annotation);\n    this.type = type;\n    this.cfiRange = cfiRange;\n    this.data = data;\n    this.sectionIndex = sectionIndex;\n    this.mark = undefined;\n    this.cb = cb;\n    this.className = className;\n    this.styles = styles;\n  }\n\n  /**\n   * Update stored data\n   * @param {object} data\n   */\n  _createClass(Annotation, [{\n    key: \"update\",\n    value: function update(data) {\n      this.data = data;\n    }\n\n    /**\n     * Add to a view\n     * @param {View} view\n     */\n  }, {\n    key: \"attach\",\n    value: function attach(view) {\n      var cfiRange = this.cfiRange,\n        data = this.data,\n        type = this.type,\n        mark = this.mark,\n        cb = this.cb,\n        className = this.className,\n        styles = this.styles;\n      var result;\n      if (type === \"highlight\") {\n        result = view.highlight(cfiRange, data, cb, className, styles);\n      } else if (type === \"underline\") {\n        result = view.underline(cfiRange, data, cb, className, styles);\n      } else if (type === \"mark\") {\n        result = view.mark(cfiRange, data, cb);\n      }\n      this.mark = result;\n      this.emit(EVENTS.ANNOTATION.ATTACH, result);\n      return result;\n    }\n\n    /**\n     * Remove from a view\n     * @param {View} view\n     */\n  }, {\n    key: \"detach\",\n    value: function detach(view) {\n      var cfiRange = this.cfiRange,\n        type = this.type;\n      var result;\n      if (view) {\n        if (type === \"highlight\") {\n          result = view.unhighlight(cfiRange);\n        } else if (type === \"underline\") {\n          result = view.ununderline(cfiRange);\n        } else if (type === \"mark\") {\n          result = view.unmark(cfiRange);\n        }\n      }\n      this.mark = undefined;\n      this.emit(EVENTS.ANNOTATION.DETACH, result);\n      return result;\n    }\n\n    /**\n     * [Not Implemented] Get text of an annotation\n     * @TODO: needs implementation in contents\n     */\n  }, {\n    key: \"text\",\n    value: function text() {}\n  }]);\n  return Annotation;\n}();\nEventEmitter(Annotation.prototype);\nexport default Annotations;","map":{"version":3,"names":["EventEmitter","EpubCFI","EVENTS","Annotations","rendition","highlights","underlines","marks","_annotations","_annotationsBySectionIndex","hooks","render","register","inject","bind","unloaded","clear","type","cfiRange","data","cb","className","styles","hash","encodeURI","cfi","sectionIndex","spinePos","annotation","Annotation","push","views","forEach","view","index","attach","_removeFromAnnotationBySectionIndex","detach","_annotationsAt","filter","h","add","apply","arguments","annotations","mark","undefined","result","highlight","underline","emit","ANNOTATION","ATTACH","unhighlight","ununderline","unmark","DETACH","prototype"],"sources":["/home/parallels/Downloads/read/node_modules/epubjs/src/annotations.js"],"sourcesContent":["import EventEmitter from \"event-emitter\";\nimport EpubCFI from \"./epubcfi\";\nimport { EVENTS } from \"./utils/constants\";\n\n/**\n\t* Handles managing adding & removing Annotations\n\t* @param {Rendition} rendition\n\t* @class\n\t*/\nclass Annotations {\n\n\tconstructor (rendition) {\n\t\tthis.rendition = rendition;\n\t\tthis.highlights = [];\n\t\tthis.underlines = [];\n\t\tthis.marks = [];\n\t\tthis._annotations = {};\n\t\tthis._annotationsBySectionIndex = {};\n\n\t\tthis.rendition.hooks.render.register(this.inject.bind(this));\n\t\tthis.rendition.hooks.unloaded.register(this.clear.bind(this));\n\t}\n\n\t/**\n\t * Add an annotation to store\n\t * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} [cb] Callback after annotation is added\n\t * @param {string} className CSS class to assign to annotation\n\t * @param {object} styles CSS styles to assign to annotation\n\t * @returns {Annotation} annotation\n\t */\n\tadd (type, cfiRange, data, cb, className, styles) {\n\t\tlet hash = encodeURI(cfiRange + type);\n\t\tlet cfi = new EpubCFI(cfiRange);\n\t\tlet sectionIndex = cfi.spinePos;\n\t\tlet annotation = new Annotation({\n\t\t\ttype,\n\t\t\tcfiRange,\n\t\t\tdata,\n\t\t\tsectionIndex,\n\t\t\tcb,\n\t\t\tclassName,\n\t\t\tstyles\n\t\t});\n\n\t\tthis._annotations[hash] = annotation;\n\n\t\tif (sectionIndex in this._annotationsBySectionIndex) {\n\t\t\tthis._annotationsBySectionIndex[sectionIndex].push(hash);\n\t\t} else {\n\t\t\tthis._annotationsBySectionIndex[sectionIndex] = [hash];\n\t\t}\n\n\t\tlet views = this.rendition.views();\n\n\t\tviews.forEach( (view) => {\n\t\t\tif (annotation.sectionIndex === view.index) {\n\t\t\t\tannotation.attach(view);\n\t\t\t}\n\t\t});\n\n\t\treturn annotation;\n\t}\n\n\t/**\n\t * Remove an annotation from store\n\t * @param {EpubCFI} cfiRange EpubCFI range the annotation is attached to\n\t * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n\t */\n\tremove (cfiRange, type) {\n\t\tlet hash = encodeURI(cfiRange + type);\n\n\t\tif (hash in this._annotations) {\n\t\t\tlet annotation = this._annotations[hash];\n\n\t\t\tif (type && annotation.type !== type) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet views = this.rendition.views();\n\t\t\tviews.forEach( (view) => {\n\t\t\t\tthis._removeFromAnnotationBySectionIndex(annotation.sectionIndex, hash);\n\t\t\t\tif (annotation.sectionIndex === view.index) {\n\t\t\t\t\tannotation.detach(view);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdelete this._annotations[hash];\n\t\t}\n\t}\n\n\t/**\n\t * Remove an annotations by Section Index\n\t * @private\n\t */\n\t_removeFromAnnotationBySectionIndex (sectionIndex, hash) {\n\t\tthis._annotationsBySectionIndex[sectionIndex] = this._annotationsAt(sectionIndex).filter(h => h !== hash);\n\t}\n\n\t/**\n\t * Get annotations by Section Index\n\t * @private\n\t */\n\t_annotationsAt (index) {\n\t\treturn this._annotationsBySectionIndex[index];\n\t}\n\n\n\t/**\n\t * Add a highlight to the store\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} cb Callback after annotation is clicked\n\t * @param {string} className CSS class to assign to annotation\n\t * @param {object} styles CSS styles to assign to annotation\n\t */\n\thighlight (cfiRange, data, cb, className, styles) {\n\t\treturn this.add(\"highlight\", cfiRange, data, cb, className, styles);\n\t}\n\n\t/**\n\t * Add a underline to the store\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} cb Callback after annotation is clicked\n\t * @param {string} className CSS class to assign to annotation\n\t * @param {object} styles CSS styles to assign to annotation\n\t */\n\tunderline (cfiRange, data, cb, className, styles) {\n\t\treturn this.add(\"underline\", cfiRange, data, cb, className, styles);\n\t}\n\n\t/**\n\t * Add a mark to the store\n\t * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t * @param {object} data Data to assign to annotation\n\t * @param {function} cb Callback after annotation is clicked\n\t */\n\tmark (cfiRange, data, cb) {\n\t\treturn this.add(\"mark\", cfiRange, data, cb);\n\t}\n\n\t/**\n\t * iterate over annotations in the store\n\t */\n\teach () {\n\t\treturn this._annotations.forEach.apply(this._annotations, arguments);\n\t}\n\n\t/**\n\t * Hook for injecting annotation into a view\n\t * @param {View} view\n\t * @private\n\t */\n\tinject (view) {\n\t\tlet sectionIndex = view.index;\n\t\tif (sectionIndex in this._annotationsBySectionIndex) {\n\t\t\tlet annotations = this._annotationsBySectionIndex[sectionIndex];\n\t\t\tannotations.forEach((hash) => {\n\t\t\t\tlet annotation = this._annotations[hash];\n\t\t\t\tannotation.attach(view);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Hook for removing annotation from a view\n\t * @param {View} view\n\t * @private\n\t */\n\tclear (view) {\n\t\tlet sectionIndex = view.index;\n\t\tif (sectionIndex in this._annotationsBySectionIndex) {\n\t\t\tlet annotations = this._annotationsBySectionIndex[sectionIndex];\n\t\t\tannotations.forEach((hash) => {\n\t\t\t\tlet annotation = this._annotations[hash];\n\t\t\t\tannotation.detach(view);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * [Not Implemented] Show annotations\n\t * @TODO: needs implementation in View\n\t */\n\tshow () {\n\n\t}\n\n\t/**\n\t * [Not Implemented] Hide annotations\n\t * @TODO: needs implementation in View\n\t */\n\thide () {\n\n\t}\n\n}\n\n/**\n * Annotation object\n * @class\n * @param {object} options\n * @param {string} options.type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n * @param {EpubCFI} options.cfiRange EpubCFI range to attach annotation to\n * @param {object} options.data Data to assign to annotation\n * @param {int} options.sectionIndex Index in the Spine of the Section annotation belongs to\n * @param {function} [options.cb] Callback after annotation is clicked\n * @param {string} className CSS class to assign to annotation\n * @param {object} styles CSS styles to assign to annotation\n * @returns {Annotation} annotation\n */\nclass Annotation {\n\n\tconstructor ({\n\t\ttype,\n\t\tcfiRange,\n\t\tdata,\n\t\tsectionIndex,\n\t\tcb,\n\t\tclassName,\n\t\tstyles\n\t}) {\n\t\tthis.type = type;\n\t\tthis.cfiRange = cfiRange;\n\t\tthis.data = data;\n\t\tthis.sectionIndex = sectionIndex;\n\t\tthis.mark = undefined;\n\t\tthis.cb = cb;\n\t\tthis.className = className;\n\t\tthis.styles = styles;\n\t}\n\n\t/**\n\t * Update stored data\n\t * @param {object} data\n\t */\n\tupdate (data) {\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Add to a view\n\t * @param {View} view\n\t */\n\tattach (view) {\n\t\tlet {cfiRange, data, type, mark, cb, className, styles} = this;\n\t\tlet result;\n\n\t\tif (type === \"highlight\") {\n\t\t\tresult = view.highlight(cfiRange, data, cb, className, styles);\n\t\t} else if (type === \"underline\") {\n\t\t\tresult = view.underline(cfiRange, data, cb, className, styles);\n\t\t} else if (type === \"mark\") {\n\t\t\tresult = view.mark(cfiRange, data, cb);\n\t\t}\n\n\t\tthis.mark = result;\n\t\tthis.emit(EVENTS.ANNOTATION.ATTACH, result);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Remove from a view\n\t * @param {View} view\n\t */\n\tdetach (view) {\n\t\tlet {cfiRange, type} = this;\n\t\tlet result;\n\n\t\tif (view) {\n\t\t\tif (type === \"highlight\") {\n\t\t\t\tresult = view.unhighlight(cfiRange);\n\t\t\t} else if (type === \"underline\") {\n\t\t\t\tresult = view.ununderline(cfiRange);\n\t\t\t} else if (type === \"mark\") {\n\t\t\t\tresult = view.unmark(cfiRange);\n\t\t\t}\n\t\t}\n\n\t\tthis.mark = undefined;\n\t\tthis.emit(EVENTS.ANNOTATION.DETACH, result);\n\t\treturn result;\n\t}\n\n\t/**\n\t * [Not Implemented] Get text of an annotation\n\t * @TODO: needs implementation in contents\n\t */\n\ttext () {\n\n\t}\n\n}\n\nEventEmitter(Annotation.prototype);\n\n\nexport default Annotations\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}