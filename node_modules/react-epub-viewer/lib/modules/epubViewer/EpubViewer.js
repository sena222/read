"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _epubjs = require("epubjs");

var _styles = _interopRequireDefault(require("./styles"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * EpubViewer Module
 * @class
 * @param props
 * @param props.url Epub path
 * @param props.epubFileOptions Epub file option
 * @param props.epubOptions Epub viewer option
 * @param props.style Epub Wrapper style
 * @param props.location Epub CFI or href
 * @param props.bookChanged Run when book changed
 * @param props.rendtionChanged Run when rendition changed
 * @param props.pageChanged Run when page changed
 * @param props.tocChanged Run when toc changed
 * @param props.selectionChanged Run when selected
 * @param props.loadingView Loading Component
 * @param ref Viewer ref
 */
var EpubViewer = function EpubViewer(_ref, ref) {
  var url = _ref.url,
      epubFileOptions = _ref.epubFileOptions,
      epubOptions = _ref.epubOptions,
      style = _ref.style,
      location = _ref.location,
      bookChanged = _ref.bookChanged,
      rendtionChanged = _ref.rendtionChanged,
      pageChanged = _ref.pageChanged,
      tocChanged = _ref.tocChanged,
      selectionChanged = _ref.selectionChanged,
      loadingView = _ref.loadingView;
  // TODO Fix the ref type correctly instead 'any' type.
  var viewerStyle = style ? _objectSpread(_objectSpread({}, _styles.default), style) : _styles.default;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isLoaded = _useState2[0],
      setIsLoaded = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      book = _useState4[0],
      setBook = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      rendition = _useState6[0],
      setRendition = _useState6[1];

  var currentCfi = (0, _react.useRef)('');
  /**
   * Move page
   * @method
   * @param type direction
   */

  var movePage = (0, _react.useCallback)(function (type) {
    if (!rendition) return;
    if (type === "PREV") rendition.prev();else rendition.next();
  }, [rendition]);
  /**
   * Move page by arrow key
   * @method
   * @param props Keyboard Event
   * @param props.key 
   */

  var handleKeyPress = (0, _react.useCallback)(function (_ref2) {
    var key = _ref2.key;
    key && key === "ArrowLeft" && movePage("PREV");
    key && key === "ArrowRight" && movePage("NEXT");
  }, [movePage]);
  /**
   * Run when location changed
   * @method
   * @param loc
   * - Set location state
   * - Run 'locationChanged()' through startCFI
   */

  var onLocationChange = (0, _react.useCallback)(function (loc) {
    var startCfi = loc && loc.start;
    var endCfi = loc && loc.end;
    var base = loc && loc.start.slice(8).split('!')[0];
    if (!book) return;
    var spineItem = book.spine.get(startCfi);
    var navItem = book.navigation.get(spineItem.href);
    var chapterName = navItem && navItem.label.trim();
    var locations = book.locations;
    var currentPage = locations.locationFromCfi(startCfi);
    var totalPage = locations.total;
    pageChanged && pageChanged({
      chapterName: chapterName,
      currentPage: currentPage,
      totalPage: totalPage,
      startCfi: startCfi,
      endCfi: endCfi,
      base: base
    });
    currentCfi.current = startCfi;
  }, [book, pageChanged]);
  /**
   * Highlight function
   * @param cfiRange Selecton CFIRange
   * @param color Highlight color
   * @param callback Highlight callback function when click it
   */

  var onHighlight = (0, _react.useCallback)(function (cfiRange, callback, color) {
    if (!rendition) return;
    rendition.annotations.remove(cfiRange, 'highlight');
    rendition.annotations.highlight(cfiRange, {}, callback, "epub-highlight", {
      'fill': color || '#fdf183'
    });
  }, [rendition]);
  /**
   * Register viewer control function
   * @method
   * - REF.CURRENT.prevPage() : Move prev page
   * - REF.CURRENT.nextPage() : Move next page
   * - REF.CURRENT.getCurrentCfi() : Get current CFI
   * - REF.CURRENT.onHighlight(): Set highlight
   * - REF.CURRENT.offHighlight(): Remove specific highliht
   * - REF.CURRENT.seLocation(): Move to specific cfi or href
   */

  var registerGlobalFunc = (0, _react.useCallback)(function () {
    if (!ref.current) return;

    if (movePage) {
      ref.current.prevPage = function () {
        return movePage("PREV");
      };

      ref.current.nextPage = function () {
        return movePage("NEXT");
      };
    }

    ref.current.getCurrentCfi = function () {
      return currentCfi.current;
    };

    if (onHighlight) {
      ref.current.onHighlight = onHighlight;
    }

    if (rendition) {
      ref.current.offHighlight = function (cfiRange) {
        return rendition.annotations.remove(cfiRange, 'highlight');
      };

      ref.current.setLocation = function (location) {
        return rendition.display(location);
      };
    }
  }, [ref, rendition, movePage, onHighlight]);
  /** Ref Checker */

  (0, _react.useEffect)(function () {
    if (!ref) {
      throw new Error("[React-Epub-Viewer] Put a ref argument that has a ViewerRef type.");
    }
  }, [ref]);
  /** Epub init options Changed */

  (0, _react.useEffect)(function () {
    if (!url) return;
    var mounted = true;
    var book_ = null;
    if (!mounted) return;

    if (book_) {
      book_.destroy();
    }

    book_ = new _epubjs.Book(url, epubFileOptions);
    setBook(book_);
    return function () {
      mounted = false;
    };
  }, [url, epubFileOptions, setBook, setIsLoaded]);
  /** Book Changed */

  (0, _react.useEffect)(function () {
    if (!book) return;
    if (bookChanged) bookChanged(book);
    book.loaded.navigation.then(function (_ref3) {
      var toc = _ref3.toc;
      var toc_ = toc.map(function (t) {
        return {
          label: t.label,
          href: t.href
        };
      });
      setIsLoaded(true);
      if (tocChanged) tocChanged(toc_);
    });
    book.ready.then(function () {
      if (!book) return;
      var stored = localStorage.getItem(book.key() + '-locations');

      if (stored) {
        return book.locations.load(stored);
      } else {
        return book.locations.generate(1024);
      }
    }).then(function () {
      if (!book) return;
      localStorage.setItem(book.key() + '-locations', book.locations.save());
    });
  }, [book, bookChanged, tocChanged]);
  /** Rendition Changed */

  (0, _react.useEffect)(function () {
    if (!rendition) return;
    if (rendtionChanged) rendtionChanged(rendition);
  }, [rendition, rendtionChanged]);
  /** Viewer Option Changed */

  (0, _react.useEffect)(function () {
    var mounted = true;
    if (!book) return;
    var node = ref.current;
    if (!node) return;
    node.innerHTML = "";
    book.ready.then(function () {
      if (!mounted) return;

      if (book.spine) {
        var _book$rendition, _book$rendition$locat, _book$rendition$locat2;

        var loc = (_book$rendition = book.rendition) === null || _book$rendition === void 0 ? void 0 : (_book$rendition$locat = _book$rendition.location) === null || _book$rendition$locat === void 0 ? void 0 : (_book$rendition$locat2 = _book$rendition$locat.start) === null || _book$rendition$locat2 === void 0 ? void 0 : _book$rendition$locat2.cfi; // if (book.rendition) book.rendition.destroy();

        var rendition_ = book.renderTo(node, _objectSpread({
          width: "100%",
          height: "100%"
        }, epubOptions));
        setRendition(rendition_);

        if (loc) {
          rendition_.display(loc);
        } else {
          rendition_.display();
        }
      }
    });
    return function () {
      mounted = false;
    };
  }, [ref, book, epubOptions, style, setRendition]);
  /** Location Changed */

  (0, _react.useEffect)(function () {
    if (!ref.current || !location) return;
    if (ref.current.setLocation) ref.current.setLocation(location);
  }, [ref, location]);
  /** 
   * Emit Viewer Event
   * - Register move event
   * - Register location changed event
   * - Register selection event
   */

  /* eslint-disable */

  (0, _react.useEffect)(function () {
    if (!rendition) return; // Emit global control function

    registerGlobalFunc();
    document.addEventListener('keyup', handleKeyPress, false);
    rendition.on("keyup", handleKeyPress);
    rendition.on("locationChanged", onLocationChange);
    selectionChanged && rendition.on('selected', selectionChanged);
    return function () {
      document.removeEventListener('keyup', handleKeyPress, false);
      rendition.off("keyup", handleKeyPress);
      rendition.off("locationChanged", onLocationChange);
      selectionChanged && rendition.off('selected', selectionChanged);
    };
  }, [rendition, registerGlobalFunc, handleKeyPress]);
  /* eslint-enable */

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [!isLoaded && loadingView, /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: ref,
      style: viewerStyle
    })]
  });
};

var _default = /*#__PURE__*/_react.default.forwardRef(EpubViewer);

exports.default = _default;