"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _EpubViewer = _interopRequireDefault(require("../epubViewer/EpubViewer"));

var _LoadingView = _interopRequireDefault(require("../../LoadingView"));

var _commonUtil = require("../../lib/utils/commonUtil");

var _viewerStyle = _interopRequireDefault(require("./viewerStyle"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Epub React Viewer Module
 * @class
 * @param props
 * @param props.url Epub file path
 * @param props.viewerLayout Viewer layout
 * @param props.viewerStyle Viewer style
 * @param props.viewerOption Viewer option
 * @param props.onBookInfoChange Run when book information changed
 * @param props.onPageChange Run when page changed
 * @param props.onTocChange Run when toc changed
 * @param props.onSelection Run when selected
 * @param props.loadingView Loading component
 * @param ref Viewer ref
 */
var ReactViewer = function ReactViewer(_ref, ref) {
  var url = _ref.url,
      viewerLayout = _ref.viewerLayout,
      viewerStyle = _ref.viewerStyle,
      viewerOption = _ref.viewerOption,
      onBookInfoChange = _ref.onBookInfoChange,
      onPageChange = _ref.onPageChange,
      onTocChange = _ref.onTocChange,
      onSelection = _ref.onSelection,
      loadingView = _ref.loadingView;

  // TODO Fix the ref type correctly instead 'any' type.
  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      book = _useState2[0],
      setBook = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      rendition = _useState4[0],
      setRendition = _useState4[1];

  var _useState5 = (0, _react.useState)({}),
      _useState6 = _slicedToArray(_useState5, 2),
      layoutStyle = _useState6[0],
      setLayoutStyle = _useState6[1];

  var _useState7 = (0, _react.useState)({
    fontFamily: 'Origin',
    fontSize: 16,
    lineHeight: 1.4,
    marginHorizontal: 0,
    marginVertical: 0
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      bookStyle = _useState8[0],
      setBookStyle = _useState8[1];

  var _useState9 = (0, _react.useState)({
    flow: "paginated",
    resizeOnOrientationChange: true,
    spread: "auto"
  }),
      _useState10 = _slicedToArray(_useState9, 2),
      bookOption = _useState10[0],
      setBookOption = _useState10[1];

  var currentSelection = (0, _react.useRef)({
    cfiRange: '',
    contents: null
  });
  /**
   * Run book changed
   * @method
   * @param book Epub Book
   */

  var bookChanged = function bookChanged(book) {
    return setBook(book);
  };
  /**
   * Run rendition changed
   * @method
   * @param rendition Epub Rendition
   */


  var rendtionChanged = function rendtionChanged(rendition) {
    return setRendition(rendition);
  };
  /**
   * Run selection changed [Debounce]
   * @method
   * @param cfiRange CFIRange
   * @param contents Selection Epub Contents
   */


  var selectionChanged = function selectionChanged(cfiRange, contents) {
    currentSelection.current = {
      cfiRange: cfiRange,
      contents: contents
    };
  };
  /**
   * Viewer resizing function
   * @method
   */


  var onResize = (0, _react.useMemo)(function () {
    return (0, _commonUtil.debounce)(250, function () {
      if (!rendition) return;
      var viewerLayout_ = viewerLayout || {
        MIN_VIEWER_WIDTH: 600,
        MIN_VIEWER_HEIGHT: 300,
        VIEWER_HEADER_HEIGHT: 0,
        VIEWER_FOOTER_HEIGHT: 0,
        VIEWER_SIDEMENU_WIDTH: 0
      };
      var _window = window,
          win_w = _window.innerWidth,
          win_h = _window.innerHeight;
      var componentHeight = viewerLayout_.VIEWER_HEADER_HEIGHT + viewerLayout_.VIEWER_FOOTER_HEIGHT;
      var w = win_w - ~~((win_w - viewerLayout_.MIN_VIEWER_WIDTH) / 100 * bookStyle.marginHorizontal);
      var h = bookOption.flow === "scrolled-doc" ? win_h - componentHeight : win_h - componentHeight - ~~((win_h - componentHeight - viewerLayout_.MIN_VIEWER_HEIGHT) / 100 * bookStyle.marginVertical);
      var marginVertical = bookOption.flow === "scrolled-doc" ? "" : "".concat(~~((win_h - componentHeight - viewerLayout_.MIN_VIEWER_HEIGHT) / 100 * bookStyle.marginVertical) / 2, "px");
      setLayoutStyle(function (layout) {
        if (layout.width !== w || layout.height !== h || layout.marginTop !== marginVertical) {
          return _objectSpread(_objectSpread({}, layout), {}, {
            width: w,
            height: h,
            marginTop: marginVertical,
            marginBottom: marginVertical
          });
        }

        return layout;
      });

      try {
        rendition.resize(w, h);
      } catch (_unused) {}
    });
  }, [rendition, viewerLayout, bookStyle.marginHorizontal, bookStyle.marginVertical, bookOption.flow]);
  /**
   * Selection Event, run when run mouseup event
   * @method <br/>
   * - Fire after the Epubjs selected event. [about 300ms]
   */

  var onSelected = (0, _react.useCallback)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var iframe, iframeWin, selection_, selectionText, cfiRange, contents;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (ref.current) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            iframe = ref.current.querySelector('iframe');

            if (iframe) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return");

          case 5:
            iframeWin = iframe.contentWindow;

            if (iframeWin) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return");

          case 8:
            selection_ = iframeWin.getSelection();

            if (selection_) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return");

          case 11:
            selectionText = selection_.toString();

            if (!(selectionText === "")) {
              _context.next = 14;
              break;
            }

            return _context.abrupt("return");

          case 14:
            _context.next = 16;
            return new Promise(function (resolve) {
              return setTimeout(function () {
                return resolve(currentSelection.current.cfiRange);
              }, 350);
            });

          case 16:
            cfiRange = _context.sent;

            if (cfiRange) {
              _context.next = 19;
              break;
            }

            return _context.abrupt("return");

          case 19:
            contents = currentSelection.current.contents;

            if (contents) {
              _context.next = 22;
              break;
            }

            return _context.abrupt("return");

          case 22:
            onSelection && onSelection(cfiRange, contents);

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [ref, onSelection]);
  /** Ref checker */

  (0, _react.useEffect)(function () {
    if (!ref) {
      throw new Error("[React-Epub-Viewer] Put a ref argument that has a ViewerRef type.");
    }
  }, [ref]);
  /** Epub parsing */
  // TODO Fix the infinite re-rendering issue, when inlcude `onBookInfoChange` to dependencies array.

  /* eslint-disable */

  (0, _react.useEffect)(function () {
    if (!book) return;
    Promise.all([book.loaded.metadata, book.opened]).then(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          metaData = _ref4[0],
          bookData = _ref4[1];

      var newBookData = {
        coverURL: bookData.archive.urlCache[bookData.cover],
        title: metaData.title,
        description: metaData.description,
        published_date: (0, _commonUtil.timeFormatter)(new Date(metaData.pubdate)),
        modified_date: (0, _commonUtil.timeFormatter)(new Date(metaData.modified_date)),
        author: metaData.creator,
        publisher: metaData.publisher,
        language: metaData.language
      };
      onBookInfoChange && onBookInfoChange(newBookData);
    }).catch(function (error) {
      throw "".concat(error.stack, " \n\n Message : Epub parsing failed.");
    });
  }, [book]);
  /* eslint-enable */

  /** Set viewer Styles/Options */

  (0, _react.useEffect)(function () {
    viewerStyle && setBookStyle(function (v) {
      return _objectSpread(_objectSpread({}, v), viewerStyle);
    });
    viewerOption && setBookOption(function (v) {
      return _objectSpread(_objectSpread({}, v), viewerOption);
    });
  }, [viewerStyle, viewerOption]);
  /** Apply viewer Styles/Options */

  (0, _react.useEffect)(function () {
    if (!rendition) return;
    onResize();
    var newStyle = {
      "body": {
        "padding-top": "0px !important",
        "padding-bottom": "0px !important"
      },
      "p": {
        "font-size": "".concat(bookStyle.fontSize, "px !important"),
        "line-height": "".concat(bookStyle.lineHeight, " !important")
      }
    };
    rendition.flow(bookOption.flow);
    rendition.spread(bookOption.spread);

    if (bookStyle.fontFamily !== "Origin") {
      Object.assign(newStyle.body, {
        "font-family": "".concat(bookStyle.fontFamily, " !important")
      });
    }

    if (bookOption.flow === "scrolled-doc") {
      // Scroll type
      Object.assign(newStyle.body, {
        "margin": "auto !important"
      });
    } else if (bookOption.spread === "auto") {
      // View 2 pages
      Object.assign(newStyle.body, {});
    } else {
      // View 1 page
      Object.assign(newStyle.body, {});
    }

    rendition.themes.register("main", _viewerStyle.default);
    rendition.themes.register("default", newStyle);
    rendition.themes.select("main");
  }, [rendition, bookStyle.fontFamily, bookStyle.fontSize, bookStyle.lineHeight, bookOption, onResize]);
  /** Emit screen resizing event */

  (0, _react.useEffect)(function () {
    window.addEventListener('resize', onResize);
    return function () {
      return window.removeEventListener('resize', onResize);
    };
  }, [onResize]);
  /** Emit selection event */

  (0, _react.useEffect)(function () {
    if (!rendition) return;
    rendition.on("mouseup", onSelected);
    return function () {
      return rendition.off("mouseup", onSelected);
    };
  }, [rendition, onSelected]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EpubViewer.default, {
      url: url,
      style: layoutStyle,
      bookChanged: bookChanged,
      rendtionChanged: rendtionChanged,
      tocChanged: onTocChange,
      pageChanged: onPageChange,
      selectionChanged: selectionChanged,
      loadingView: loadingView || /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoadingView.default, {}),
      ref: ref
    })
  });
};

var _default = /*#__PURE__*/_react.default.forwardRef(ReactViewer);

exports.default = _default;