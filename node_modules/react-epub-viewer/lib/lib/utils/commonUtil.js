"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareCfi = exports.clashCfiRange = exports.cfiRangeSpliter = void 0;
exports.debounce = debounce;
exports.timeFormatter = exports.getSelectionPosition = exports.getParagraphCfi = exports.getNodefromCfi = void 0;

var _epubjs = require("epubjs");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * DateTime to `yyyy-mm-dd`
 * @param {Date} time 
 */
var timeFormatter = function timeFormatter(time) {
  var yyyy = time.getFullYear();
  var mm = time.getMonth() + 1;
  var dd = time.getDate();
  var msg = "".concat(yyyy, "-").concat(mm, "-").concat(dd);
  return msg;
};
/**
 * Comparison of two CFI sizes
 * - -1 : CFI 1 < CFI 2
 * - 0 : CFI 1 == CFI 2
 * - 1 : CFI 1 > CFI 2
 * @param cfi_1 CFI 1
 * @param cfi_2 CFI 2
 */


exports.timeFormatter = timeFormatter;

var compareCfi = function compareCfi(cfi_1, cfi_2) {
  var epubcfi = new _epubjs.EpubCFI();
  return epubcfi.compare(cfi_1, cfi_2);
};
/**
 * Split CFI range into two starting CFI and ending CFI
 * - null : Invalid CFIRange
 * @param cfiRange CFIRange
 */


exports.compareCfi = compareCfi;

var cfiRangeSpliter = function cfiRangeSpliter(cfiRange) {
  var content = cfiRange.slice(8, -1);

  var _content$split = content.split(','),
      _content$split2 = _slicedToArray(_content$split, 3),
      origin = _content$split2[0],
      start = _content$split2[1],
      end = _content$split2[2];

  if (!origin || !start || !end) return null;
  var startCfi = "epubcfi(".concat(origin + start, ")");
  var endCfi = "epubcfi(".concat(origin + end, ")");
  return {
    startCfi: startCfi,
    endCfi: endCfi
  };
};
/**
 * Whether the two CFI ranges nested
 * - true : Nested
 * - false : Not nested
 * - null : Invalid CFIRange
 * @param cfiRange1 First CFIRange
 * @param cfiRange2 Second CFIRange
 */


exports.cfiRangeSpliter = cfiRangeSpliter;

var clashCfiRange = function clashCfiRange(baseCfiRange, targetCfiRange) {
  var splitCfi1 = cfiRangeSpliter(baseCfiRange);
  var splitCfi2 = cfiRangeSpliter(targetCfiRange);
  if (!splitCfi1 || !splitCfi2) return null;
  var s1 = splitCfi1.startCfi,
      e1 = splitCfi1.endCfi;
  var s2 = splitCfi2.startCfi,
      e2 = splitCfi2.endCfi;

  if (compareCfi(s2, s1) <= 0 && compareCfi(s1, e2) <= 0 || compareCfi(s2, e1) <= 0 && compareCfi(e1, e2) <= 0 || compareCfi(s1, s2) <= 0 && compareCfi(e2, e1) <= 0) {
    return true;
  }

  return false;
};
/**
 * Extract paragraph CFI from CFIRange
 * - null : Invalid CFIRange
 * @param cfiRange CFIRange
 */


exports.clashCfiRange = clashCfiRange;

var getParagraphCfi = function getParagraphCfi(cfiRange) {
  if (!cfiRange) return;
  var content = cfiRange.slice(8, -1);

  var _content$split3 = content.split(','),
      _content$split4 = _slicedToArray(_content$split3, 3),
      origin = _content$split4[0],
      start = _content$split4[1],
      end = _content$split4[2];

  if (!origin || !start || !end) return null;
  var cfi = "epubcfi(".concat(origin, ")");
  return cfi;
};
/**
 * Get specific DOM Element from CFI
 * - **â€» Warning**: Other Iframe must not exist in the Reader page!
 * @param cfi CFI
 * @returns HTML Element or Null
 */


exports.getParagraphCfi = getParagraphCfi;

var getNodefromCfi = function getNodefromCfi(cfi) {
  var epubcfi = cfi.slice(8, -1);
  /* Remove Id */

  var pureCfi = epubcfi.replace(/\[.*?\]/gi, '');
  /* Only CFI Base */

  var splitCfi = pureCfi.split('!');

  if (splitCfi.length < 1 || splitCfi[1] === "") {
    return null;
  }
  /* Remove Body tag CFI */


  var cfiPath = splitCfi[1].split('/').slice(2).map(function (x) {
    return Number(x);
  });
  var iframe = document.querySelector('iframe');
  if (!iframe) return null;
  var iframeBody = iframe.contentWindow && iframe.contentWindow.document.body;
  if (!iframeBody) return null;
  var component = iframeBody;
  /* Find Node based on CFI */

  var _iterator = _createForOfIteratorHelper(cfiPath),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var idx = _step.value;
      var childNodes = component && component.childNodes;
      /* Bookmark / Highlight filtering.. */

      var filtered = _toConsumableArray(childNodes).filter(function (n) {
        return !n.dataset || !n.dataset.bookmark || !n.dataset.highlight;
      });

      component = filtered[idx - 1];

      if (!component) {
        component = null;
        break;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return component;
};
/**
 * Selection absolute location
 * @param viewer viewerRef.current
 * @param bookStyle bookStyle
 * @param bookFlow book-flow
 * @param MIN_VIEWER_WIDTH min viewer width
 * @param MIN_VIEWER_HEIGHT min viewer height
 * @param VIEWER_HEADER_HEIGHT viewer header height
 * @param CONTEXTMENU_WIDTH contextmenu width
 * @returns Contextmenu location
 */


exports.getNodefromCfi = getNodefromCfi;

var getSelectionPosition = function getSelectionPosition(viewer, bookStyle, bookFlow, MIN_VIEWER_WIDTH, MIN_VIEWER_HEIGHT, VIEWER_HEADER_HEIGHT, CONTEXTMENU_WIDTH) {
  var _window = window,
      windowWidth = _window.innerWidth,
      windowHeight = _window.innerHeight;
  var iframeWidth = viewer.offsetWidth;
  var scrollTop = viewer.querySelector('div').scrollTop;
  var iframe = viewer.querySelector('iframe');
  var selection_ = iframe && iframe.contentWindow && iframe.contentWindow.getSelection();
  if (!selection_ || selection_.rangeCount === 0) return null;
  var range = selection_.getRangeAt(0);

  var _range$getBoundingCli = range.getBoundingClientRect(),
      selectionX = _range$getBoundingCli.x,
      selectionY = _range$getBoundingCli.y,
      selectionHeight = _range$getBoundingCli.height,
      selectionWidth = _range$getBoundingCli.width;

  var marginLeft = ~~((windowWidth - MIN_VIEWER_WIDTH) / 100 * bookStyle.marginHorizontal / 2);
  var marginTop = bookFlow === "scrolled-doc" ? 0 : ~~((windowHeight - VIEWER_HEADER_HEIGHT - MIN_VIEWER_HEIGHT) / 100 * bookStyle.marginVertical / 2);
  var x = ~~(selectionX % iframeWidth + marginLeft + (selectionWidth / 2 - CONTEXTMENU_WIDTH / 2));
  var y = ~~(selectionY + selectionHeight + VIEWER_HEADER_HEIGHT + marginTop - scrollTop);
  return {
    x: x,
    y: y,
    height: selectionHeight,
    width: selectionWidth
  };
};
/**
 * Debounce
 * @param func Target function
 * @param timeout delay
 */


exports.getSelectionPosition = getSelectionPosition;

function debounce(timeout, func) {
  var timer;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    clearTimeout(timer);
    timer = setTimeout(function () {
      func.apply(void 0, args);
    }, timeout);
  };
}